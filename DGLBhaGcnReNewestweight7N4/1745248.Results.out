0: cmsgpu001.ihep.ac.cn
GPU 0: NVIDIA A100-PCIE-40GB (UUID: GPU-83673d1f-01b2-490d-5bc6-a84aaf3ddc65)
Allocate GPU cards : 0

modinfo:
filename:       /lib/modules/3.10.0-1160.71.1.el7.x86_64/extra/nvidia.ko.xz
firmware:       nvidia/515.65.01/gsp.bin
alias:          char-major-195-*
version:        515.65.01
supported:      external
license:        NVIDIA
retpoline:      Y
rhelversion:    7.9
srcversion:     8049D44E2C1B08F41E1B8A6
alias:          pci:v000010DEd*sv*sd*bc06sc80i00*
alias:          pci:v000010DEd*sv*sd*bc03sc02i00*
alias:          pci:v000010DEd*sv*sd*bc03sc00i00*
depends:        drm
vermagic:       3.10.0-1160.71.1.el7.x86_64 SMP mod_unload modversions 
signer:         DKMS module signing key
sig_key:        9B:9E:55:A9:86:D9:50:0B:6D:2D:9F:BA:A7:E6:45:39:D4:DD:5F:C6
sig_hashalgo:   sha512
parm:           NvSwitchRegDwords:NvSwitch regkey (charp)
parm:           NvSwitchBlacklist:NvSwitchBlacklist=uuid[,uuid...] (charp)
parm:           NVreg_ResmanDebugLevel:int
parm:           NVreg_RmLogonRC:int
parm:           NVreg_ModifyDeviceFiles:int
parm:           NVreg_DeviceFileUID:int
parm:           NVreg_DeviceFileGID:int
parm:           NVreg_DeviceFileMode:int
parm:           NVreg_InitializeSystemMemoryAllocations:int
parm:           NVreg_UsePageAttributeTable:int
parm:           NVreg_EnablePCIeGen3:int
parm:           NVreg_EnableMSI:int
parm:           NVreg_TCEBypassMode:int
parm:           NVreg_EnableStreamMemOPs:int
parm:           NVreg_RestrictProfilingToAdminUsers:int
parm:           NVreg_PreserveVideoMemoryAllocations:int
parm:           NVreg_EnableS0ixPowerManagement:int
parm:           NVreg_S0ixPowerManagementVideoMemoryThreshold:int
parm:           NVreg_DynamicPowerManagement:int
parm:           NVreg_DynamicPowerManagementVideoMemoryThreshold:int
parm:           NVreg_EnableGpuFirmware:int
parm:           NVreg_EnableGpuFirmwareLogs:int
parm:           NVreg_OpenRmEnableUnsupportedGpus:int
parm:           NVreg_EnableUserNUMAManagement:int
parm:           NVreg_MemoryPoolSize:int
parm:           NVreg_KMallocHeapMaxSize:int
parm:           NVreg_VMallocHeapMaxSize:int
parm:           NVreg_IgnoreMMIOCheck:int
parm:           NVreg_NvLinkDisable:int
parm:           NVreg_EnablePCIERelaxedOrderingMode:int
parm:           NVreg_RegisterPCIDriver:int
parm:           NVreg_EnableDbgBreakpoint:int
parm:           NVreg_RegistryDwords:charp
parm:           NVreg_RegistryDwordsPerDevice:charp
parm:           NVreg_RmMsg:charp
parm:           NVreg_GpuBlacklist:charp
parm:           NVreg_TemporaryFilePath:charp
parm:           NVreg_ExcludedGpus:charp
parm:           NVreg_DmaRemapPeerMmio:int
parm:           rm_firmware_active:charp

nvidia-smi:
Sat Sep 17 11:47:35 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 515.65.01    Driver Version: 515.65.01    CUDA Version: 11.7     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  NVIDIA A100-PCI...  On   | 00000000:3B:00.0 Off |                    0 |
| N/A   20C    P0    32W / 250W |      0MiB / 40960MiB |      0%      Default |
|                               |                      |             Disabled |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+

nvcc --version:
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2021 NVIDIA Corporation
Built on Sun_Mar_21_19:15:46_PDT_2021
Cuda compilation tools, release 11.3, V11.3.58
Build cuda_11.3.r11.3/compiler.29745058_0

 torch version: 1.10.2

 cuda version: 11.3

 is cuda available: True

 CUDNN VERSION: 8200

 Number CUDA Devices: 1

 CUDA Device Name: NVIDIA A100-PCIE-40GB

 CUDA Device Total Memory [GB]: 42.358472704

 Device capability: (8, 0) 

 Cuda deviice: <torch.cuda.device object at 0x2b959a5b88e0> 

 Is cuda initialized: True

 CUDA_HOME: /hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1

real	0m4.760s
user	0m2.579s
sys	0m0.975s
/hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/cupy/_environment.py:438: UserWarning: 
--------------------------------------------------------------------------------

  CuPy may not function correctly because multiple CuPy packages are installed
  in your environment:

    cupy, cupy-cuda110

  Follow these steps to resolve this issue:

    1. For all packages listed above, run the following command to remove all
       existing CuPy installations:

         $ pip uninstall <package_name>

      If you previously installed CuPy via conda, also run the following:

         $ conda uninstall cupy

    2. Install the appropriate CuPy package.
       Refer to the Installation Guide for detailed instructions.

         https://docs.cupy.dev/en/stable/install.html

--------------------------------------------------------------------------------

  warnings.warn(f'''
[11:47:58] /opt/dgl/src/runtime/tensordispatch.cc:43: TensorDispatcher: dlopen failed: /hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/dgl/tensoradapter/pytorch/libtensoradapter_pytorch_1.10.2.so: cannot open shared object file: No such file or directory
Using backend: pytorch





 Loading data ... 



training set shape (80000, 6796) 
sum 8401300

target set shape (80000, 6796) 
sum 5574226

TraTen and TrvTen shape:
 torch.Size([80000, 6796]) torch.Size([80000, 6796])




 The Network ... 






 The graph ... 



edge_index
 tensor([[   0,    1,    2,  ..., 4907, 4907, 4907],
        [   1,    2,    3,  ..., 4918, 4919, 4920]]) 

edge_index shape
 torch.Size([2, 36593])
graph: Graph(num_nodes=6796, num_edges=36593,
      ndata_schemes={}
      edata_schemes={}) 
nodes: tensor([   0,    1,    2,  ..., 6793, 6794, 6795], device='cuda:0') 
nodes shape: torch.Size([6796]) 
edges: (tensor([   0,    1,    2,  ..., 4907, 4907, 4907], device='cuda:0'), tensor([   1,    2,    3,  ..., 4918, 4919, 4920], device='cuda:0')) 
edges shae:

number of nodes: 6796

number of edges: 73186

node features (random input): tensor([[ 0.1436],
        [ 0.0165],
        [-2.1679],
        ...,
        [-0.2738],
        [-0.1672],
        [-1.0454]], device='cuda:0', requires_grad=True) 
node features sum: tensor(-96.5698, device='cuda:0', grad_fn=<SumBackward0>)

edges features: tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
edges features sum: tensor(73186., device='cuda:0', grad_fn=<SumBackward0>)

example: 
Out degrees of node 234: 14

In degrees of node 234: 14
Model name: DGLBhaGcnReNewestweight7N4

net GCN(
  (conv1): GraphConv(in=1, out=256, normalization=both, activation=None)
  (conv2): GraphConv(in=256, out=128, normalization=both, activation=None)
  (conv3): GraphConv(in=128, out=64, normalization=both, activation=None)
  (conv4): GraphConv(in=64, out=32, normalization=both, activation=None)
  (conv5): GraphConv(in=32, out=1, normalization=both, activation=None)
) 
number of the free learnable parameters: 43777

parameters of the network:

name conv1.weight 
shape:
 torch.Size([1, 256]) 
grad:
 True 
date:
 tensor([[ 0.1091,  0.1483,  0.1270,  0.1169, -0.1359,  0.0676,  0.0948, -0.0143,
         -0.1124, -0.0085,  0.1084,  0.0357,  0.0531, -0.0350,  0.0339,  0.1228,
          0.0587,  0.0244, -0.1008, -0.0257,  0.0461,  0.1289, -0.0342,  0.0084,
         -0.0370, -0.0825, -0.1097,  0.0636,  0.0959, -0.1354, -0.0988,  0.1115,
         -0.1025, -0.0702, -0.1190,  0.0123,  0.1122,  0.0023,  0.1397, -0.0013,
         -0.1182,  0.1459, -0.0589, -0.0588,  0.0287, -0.0929,  0.0885, -0.1476,
          0.0061,  0.1415,  0.0035,  0.1220,  0.0121,  0.0600,  0.1056,  0.1116,
          0.0199, -0.0962,  0.0548,  0.0425,  0.1329,  0.1074,  0.0780,  0.0172,
         -0.0053, -0.0298,  0.0512,  0.0413, -0.0460, -0.1089,  0.0083,  0.0059,
          0.0239, -0.1364, -0.0957,  0.0698, -0.0167,  0.1004,  0.1163,  0.1486,
          0.0807,  0.1424, -0.0599,  0.0565,  0.0553, -0.1432,  0.1174,  0.0698,
         -0.1120,  0.1340, -0.0412, -0.0125,  0.0810,  0.0203, -0.0843,  0.1002,
          0.1030,  0.0091,  0.0804,  0.0655, -0.1441,  0.1419,  0.0350,  0.0165,
         -0.1350,  0.0146,  0.1446,  0.0705,  0.0846, -0.0548,  0.0628, -0.1498,
         -0.0712, -0.0622,  0.1298,  0.1464, -0.0726, -0.0378,  0.0657, -0.0355,
          0.0049,  0.0210,  0.0406,  0.0986,  0.0845, -0.0043,  0.1465,  0.0128,
         -0.0837, -0.0427, -0.1153,  0.0455,  0.1006, -0.0458,  0.1052, -0.1387,
          0.0876,  0.0297, -0.0668, -0.1090, -0.1190, -0.1044, -0.1131,  0.0706,
          0.1270, -0.0364, -0.0593,  0.1427,  0.0347, -0.0197,  0.1004, -0.0748,
          0.0328, -0.0030, -0.0292, -0.1371, -0.1413,  0.0595, -0.0639,  0.1090,
         -0.1141, -0.0418,  0.1232,  0.1498,  0.0137, -0.1030, -0.0200, -0.0373,
         -0.1449,  0.0912, -0.1104,  0.0702,  0.0351, -0.0300,  0.1480, -0.1338,
          0.0952, -0.0132, -0.1078,  0.1253,  0.1219,  0.1253, -0.0737,  0.0813,
         -0.1516,  0.1368,  0.1109,  0.0083,  0.0817, -0.0165,  0.0850, -0.1368,
          0.0033,  0.0051, -0.1108, -0.1099, -0.0971,  0.0499, -0.0620, -0.1271,
         -0.1449,  0.0106, -0.1303,  0.0916,  0.0858,  0.0369, -0.0661, -0.0337,
          0.0492, -0.0705, -0.0453,  0.0012,  0.1072,  0.0655,  0.0179,  0.0914,
         -0.0464,  0.0435,  0.1416, -0.0883,  0.0872, -0.0866, -0.1179,  0.0444,
         -0.0136, -0.1208, -0.0437, -0.0605, -0.0446,  0.0464, -0.0178,  0.0246,
         -0.0726, -0.0149,  0.0956, -0.0647, -0.1463, -0.0655,  0.0289, -0.0600,
         -0.0907, -0.0049, -0.1379, -0.0581,  0.1435,  0.0647, -0.0311, -0.0471,
          0.1162, -0.1450,  0.0842,  0.0870, -0.1043, -0.0356,  0.1270, -0.1191]],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([[ 0.1091,  0.1483,  0.1270,  0.1169, -0.1359,  0.0676,  0.0948, -0.0143,
         -0.1124, -0.0085,  0.1084,  0.0357,  0.0531, -0.0350,  0.0339,  0.1228,
          0.0587,  0.0244, -0.1008, -0.0257,  0.0461,  0.1289, -0.0342,  0.0084,
         -0.0370, -0.0825, -0.1097,  0.0636,  0.0959, -0.1354, -0.0988,  0.1115,
         -0.1025, -0.0702, -0.1190,  0.0123,  0.1122,  0.0023,  0.1397, -0.0013,
         -0.1182,  0.1459, -0.0589, -0.0588,  0.0287, -0.0929,  0.0885, -0.1476,
          0.0061,  0.1415,  0.0035,  0.1220,  0.0121,  0.0600,  0.1056,  0.1116,
          0.0199, -0.0962,  0.0548,  0.0425,  0.1329,  0.1074,  0.0780,  0.0172,
         -0.0053, -0.0298,  0.0512,  0.0413, -0.0460, -0.1089,  0.0083,  0.0059,
          0.0239, -0.1364, -0.0957,  0.0698, -0.0167,  0.1004,  0.1163,  0.1486,
          0.0807,  0.1424, -0.0599,  0.0565,  0.0553, -0.1432,  0.1174,  0.0698,
         -0.1120,  0.1340, -0.0412, -0.0125,  0.0810,  0.0203, -0.0843,  0.1002,
          0.1030,  0.0091,  0.0804,  0.0655, -0.1441,  0.1419,  0.0350,  0.0165,
         -0.1350,  0.0146,  0.1446,  0.0705,  0.0846, -0.0548,  0.0628, -0.1498,
         -0.0712, -0.0622,  0.1298,  0.1464, -0.0726, -0.0378,  0.0657, -0.0355,
          0.0049,  0.0210,  0.0406,  0.0986,  0.0845, -0.0043,  0.1465,  0.0128,
         -0.0837, -0.0427, -0.1153,  0.0455,  0.1006, -0.0458,  0.1052, -0.1387,
          0.0876,  0.0297, -0.0668, -0.1090, -0.1190, -0.1044, -0.1131,  0.0706,
          0.1270, -0.0364, -0.0593,  0.1427,  0.0347, -0.0197,  0.1004, -0.0748,
          0.0328, -0.0030, -0.0292, -0.1371, -0.1413,  0.0595, -0.0639,  0.1090,
         -0.1141, -0.0418,  0.1232,  0.1498,  0.0137, -0.1030, -0.0200, -0.0373,
         -0.1449,  0.0912, -0.1104,  0.0702,  0.0351, -0.0300,  0.1480, -0.1338,
          0.0952, -0.0132, -0.1078,  0.1253,  0.1219,  0.1253, -0.0737,  0.0813,
         -0.1516,  0.1368,  0.1109,  0.0083,  0.0817, -0.0165,  0.0850, -0.1368,
          0.0033,  0.0051, -0.1108, -0.1099, -0.0971,  0.0499, -0.0620, -0.1271,
         -0.1449,  0.0106, -0.1303,  0.0916,  0.0858,  0.0369, -0.0661, -0.0337,
          0.0492, -0.0705, -0.0453,  0.0012,  0.1072,  0.0655,  0.0179,  0.0914,
         -0.0464,  0.0435,  0.1416, -0.0883,  0.0872, -0.0866, -0.1179,  0.0444,
         -0.0136, -0.1208, -0.0437, -0.0605, -0.0446,  0.0464, -0.0178,  0.0246,
         -0.0726, -0.0149,  0.0956, -0.0647, -0.1463, -0.0655,  0.0289, -0.0600,
         -0.0907, -0.0049, -0.1379, -0.0581,  0.1435,  0.0647, -0.0311, -0.0471,
          0.1162, -0.1450,  0.0842,  0.0870, -0.1043, -0.0356,  0.1270, -0.1191]],
       device='cuda:0', requires_grad=True)

name conv1.bias 
shape:
 torch.Size([256]) 
grad:
 True 
date:
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)

name conv2.weight 
shape:
 torch.Size([256, 128]) 
grad:
 True 
date:
 tensor([[ 0.0369,  0.0178,  0.0554,  ...,  0.0160, -0.0569, -0.0018],
        [ 0.0878, -0.0351, -0.0572,  ...,  0.0173,  0.0643, -0.0224],
        [ 0.0539, -0.0087, -0.0530,  ..., -0.0783,  0.0368,  0.0458],
        ...,
        [-0.0800, -0.0621, -0.0288,  ...,  0.1042,  0.0258,  0.0546],
        [ 0.0458,  0.0892, -0.0268,  ...,  0.0948, -0.0230, -0.1163],
        [ 0.0379,  0.0915, -0.0439,  ...,  0.1018, -0.0702,  0.0254]],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([[ 0.0369,  0.0178,  0.0554,  ...,  0.0160, -0.0569, -0.0018],
        [ 0.0878, -0.0351, -0.0572,  ...,  0.0173,  0.0643, -0.0224],
        [ 0.0539, -0.0087, -0.0530,  ..., -0.0783,  0.0368,  0.0458],
        ...,
        [-0.0800, -0.0621, -0.0288,  ...,  0.1042,  0.0258,  0.0546],
        [ 0.0458,  0.0892, -0.0268,  ...,  0.0948, -0.0230, -0.1163],
        [ 0.0379,  0.0915, -0.0439,  ...,  0.1018, -0.0702,  0.0254]],
       device='cuda:0', requires_grad=True)

name conv2.bias 
shape:
 torch.Size([128]) 
grad:
 True 
date:
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
parameter:
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)

name conv3.weight 
shape:
 torch.Size([128, 64]) 
grad:
 True 
date:
 tensor([[ 0.0011, -0.0635,  0.0083,  ..., -0.0492,  0.0926,  0.0925],
        [ 0.1399, -0.0847,  0.0809,  ...,  0.0878, -0.1380,  0.1320],
        [ 0.1206,  0.1252, -0.1748,  ...,  0.1697, -0.1639, -0.1247],
        ...,
        [ 0.0646,  0.1698, -0.0715,  ...,  0.1105,  0.1355, -0.1662],
        [-0.1616,  0.0175,  0.1215,  ...,  0.0681,  0.0600, -0.0577],
        [-0.0684, -0.0539, -0.0436,  ..., -0.0857, -0.1166, -0.0678]],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([[ 0.0011, -0.0635,  0.0083,  ..., -0.0492,  0.0926,  0.0925],
        [ 0.1399, -0.0847,  0.0809,  ...,  0.0878, -0.1380,  0.1320],
        [ 0.1206,  0.1252, -0.1748,  ...,  0.1697, -0.1639, -0.1247],
        ...,
        [ 0.0646,  0.1698, -0.0715,  ...,  0.1105,  0.1355, -0.1662],
        [-0.1616,  0.0175,  0.1215,  ...,  0.0681,  0.0600, -0.0577],
        [-0.0684, -0.0539, -0.0436,  ..., -0.0857, -0.1166, -0.0678]],
       device='cuda:0', requires_grad=True)

name conv3.bias 
shape:
 torch.Size([64]) 
grad:
 True 
date:
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)

name conv4.weight 
shape:
 torch.Size([64, 32]) 
grad:
 True 
date:
 tensor([[-0.1742, -0.2376,  0.1338,  ...,  0.0542,  0.0759,  0.1615],
        [-0.0088, -0.0742, -0.0921,  ...,  0.1875,  0.1599, -0.1948],
        [-0.2314, -0.0944,  0.0614,  ...,  0.0400, -0.1122,  0.0046],
        ...,
        [-0.2241, -0.2094, -0.1229,  ..., -0.1975,  0.1415,  0.1266],
        [ 0.0774, -0.2061, -0.0053,  ...,  0.1746,  0.2246, -0.2338],
        [-0.2355,  0.0919,  0.1268,  ..., -0.1718,  0.0163,  0.1395]],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([[-0.1742, -0.2376,  0.1338,  ...,  0.0542,  0.0759,  0.1615],
        [-0.0088, -0.0742, -0.0921,  ...,  0.1875,  0.1599, -0.1948],
        [-0.2314, -0.0944,  0.0614,  ...,  0.0400, -0.1122,  0.0046],
        ...,
        [-0.2241, -0.2094, -0.1229,  ..., -0.1975,  0.1415,  0.1266],
        [ 0.0774, -0.2061, -0.0053,  ...,  0.1746,  0.2246, -0.2338],
        [-0.2355,  0.0919,  0.1268,  ..., -0.1718,  0.0163,  0.1395]],
       device='cuda:0', requires_grad=True)

name conv4.bias 
shape:
 torch.Size([32]) 
grad:
 True 
date:
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
parameter:
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)

name conv5.weight 
shape:
 torch.Size([32, 1]) 
grad:
 True 
date:
 tensor([[ 0.3338],
        [-0.2700],
        [ 0.4129],
        [ 0.3041],
        [-0.1836],
        [ 0.0215],
        [ 0.0852],
        [ 0.0528],
        [ 0.1085],
        [-0.0417],
        [-0.0575],
        [ 0.3316],
        [ 0.0576],
        [ 0.2802],
        [ 0.3307],
        [ 0.0152],
        [-0.1322],
        [ 0.1418],
        [-0.3755],
        [-0.1675],
        [-0.2684],
        [-0.1226],
        [ 0.3749],
        [-0.3051],
        [-0.1608],
        [-0.0859],
        [-0.3423],
        [-0.1381],
        [-0.0864],
        [-0.3050],
        [-0.2523],
        [-0.1511]], device='cuda:0') 
parameter:
 Parameter containing:
tensor([[ 0.3338],
        [-0.2700],
        [ 0.4129],
        [ 0.3041],
        [-0.1836],
        [ 0.0215],
        [ 0.0852],
        [ 0.0528],
        [ 0.1085],
        [-0.0417],
        [-0.0575],
        [ 0.3316],
        [ 0.0576],
        [ 0.2802],
        [ 0.3307],
        [ 0.0152],
        [-0.1322],
        [ 0.1418],
        [-0.3755],
        [-0.1675],
        [-0.2684],
        [-0.1226],
        [ 0.3749],
        [-0.3051],
        [-0.1608],
        [-0.0859],
        [-0.3423],
        [-0.1381],
        [-0.0864],
        [-0.3050],
        [-0.2523],
        [-0.1511]], device='cuda:0', requires_grad=True)

name conv5.bias 
shape:
 torch.Size([1]) 
grad:
 True 
date:
 tensor([0.], device='cuda:0') 
parameter:
 Parameter containing:
tensor([0.], device='cuda:0', requires_grad=True)



input node feature: 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].shape torch.Size([6796, 1]) 
g.ndata[nfet].sum tensor(82.4738, device='cuda:0')



input graph: 
g Graph(num_nodes=6796, num_edges=73186,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)}) 
g.edata[efet].shape torch.Size([73186, 1]) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
g.edata[efet].sum tensor(73186., device='cuda:0', grad_fn=<SumBackward0>) 
g.ndata[nfet].shape torch.Size([6796, 1]) 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].sum tensor(82.4738, device='cuda:0')
param0_0.shape torch.Size([256])
param.data[:, 0].shape torch.Size([256])



h after the first convolutional layer: 
 tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0',
       grad_fn=<AddBackward0>) 
h.shape torch.Size([6796, 256]) 
h.sum tensor(-152.2967, device='cuda:0', grad_fn=<SumBackward0>)



h[:, 0].sum tensor(12.2115, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[0] tensor(12.4848, device='cuda:0')



h[100].sum tensor(-8.9555, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[100] tensor(-9.1560, device='cuda:0')



h[200].sum tensor(-2.9291, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[200] tensor(-2.9946, device='cuda:0')



h1 after relu, the first updating, and another relu: 
 tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0',
       grad_fn=<ReluBackward0>) 
h.shape torch.Size([6796, 256]) 
h.sum tensor(9581.9492, device='cuda:0', grad_fn=<SumBackward0>)



h2 after the second convolutional layer: 
 tensor([[0.0126, 0.0000, 0.0074,  ..., 0.0000, 0.0165, 0.0000],
        [0.0059, 0.0000, 0.0035,  ..., 0.0000, 0.0077, 0.0000],
        [0.0017, 0.0000, 0.0010,  ..., 0.0000, 0.0022, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0', grad_fn=<ReluBackward0>) 
h2.shape torch.Size([6796, 128]) 
h2.sum tensor(74499.4297, device='cuda:0', grad_fn=<SumBackward0>)



h2[0].sum tensor(1275.9778, device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param0_2).sum() + bias0 tensor(81.1329, device='cuda:0', grad_fn=<AddBackward0>)



h2[100].sum tensor(1548.5813, device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param50_2).sum() + bias50 tensor(98.4755, device='cuda:0', grad_fn=<AddBackward0>)



h2[200].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param100_2).sum() + bias100 tensor(-36.8957, device='cuda:0', grad_fn=<AddBackward0>)



g Graph(num_nodes=6796, num_edges=73186,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)})



 output, 
h5 tensor([[-0.6282],
        [-0.4425],
        [-0.2978],
        ...,
        [ 0.0000],
        [ 0.0000],
        [ 0.0000]], device='cuda:0', grad_fn=<AddBackward0>) 
h5.shape torch.Size([6796, 1]) 
h5.sum tensor(-29062.7109, device='cuda:0', grad_fn=<SumBackward0>) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
g.edata[efet].shape torch.Size([73186, 1]) 
g.edata[efet].sum tensor(73186., device='cuda:0', grad_fn=<SumBackward0>)

Passing event 1007 from the network before training input tensor([0., 0., 0.,  ..., 0., 0., 0.], device='cuda:0') 
result1: tensor([[-0.6282],
        [-0.4425],
        [-0.2978],
        ...,
        [ 0.0000],
        [ 0.0000],
        [ 0.0000]], device='cuda:0', grad_fn=<AddBackward0>) 
result1.shape: torch.Size([6796, 1])



input node feature: 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].shape torch.Size([135920, 1]) 
g.ndata[nfet].sum tensor(989.0452, device='cuda:0')



input graph: 
g Graph(num_nodes=135920, num_edges=1463720,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)}) 
g.edata[efet].shape torch.Size([1463720, 1]) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', grad_fn=<CatBackward0>) 
g.edata[efet].sum tensor(1463720., device='cuda:0', grad_fn=<SumBackward0>) 
g.ndata[nfet].shape torch.Size([135920, 1]) 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].sum tensor(989.0452, device='cuda:0')
param0_0.shape torch.Size([256])
param.data[:, 0].shape torch.Size([256])



h after the first convolutional layer: 
 tensor([[ 0.0209, -0.0216, -0.0077,  ...,  0.0024,  0.0184,  0.0041],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        ...,
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000]],
       device='cuda:0', grad_fn=<AddBackward0>) 
h.shape torch.Size([135920, 256]) 
h.sum tensor(48.4491, device='cuda:0', grad_fn=<SumBackward0>)



h[:, 0].sum tensor(137.1390, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[0] tensor(140.5817, device='cuda:0')



h[100].sum tensor(138.2811, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[100] tensor(141.7525, device='cuda:0')



h[200].sum tensor(-64.8113, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[200] tensor(-66.4384, device='cuda:0')



h1 after relu, the first updating, and another relu: 
 tensor([[0.0788, 0.0000, 0.0000,  ..., 0.0091, 0.0695, 0.0155],
        [0.0648, 0.0000, 0.0000,  ..., 0.0075, 0.0571, 0.0128],
        [0.0152, 0.0000, 0.0000,  ..., 0.0018, 0.0134, 0.0030],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0', grad_fn=<ReluBackward0>) 
h.shape torch.Size([135920, 256]) 
h.sum tensor(103968.5391, device='cuda:0', grad_fn=<SumBackward0>)



h2 after the second convolutional layer: 
 tensor([[0.0000, 0.0964, 0.0000,  ..., 0.0105, 0.0000, 0.2243],
        [0.0000, 0.0826, 0.0000,  ..., 0.0090, 0.0000, 0.1922],
        [0.0000, 0.0664, 0.0000,  ..., 0.0073, 0.0000, 0.1543],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0', grad_fn=<ReluBackward0>) 
h2.shape torch.Size([135920, 128]) 
h2.sum tensor(565213.2500, device='cuda:0', grad_fn=<SumBackward0>)



h2[0].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param0_2).sum() + bias0 tensor(-1105.3073, device='cuda:0', grad_fn=<AddBackward0>)



h2[100].sum tensor(16043.7666, device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param50_2).sum() + bias50 tensor(1124.0690, device='cuda:0', grad_fn=<AddBackward0>)



h2[200].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param100_2).sum() + bias100 tensor(-253.2600, device='cuda:0', grad_fn=<AddBackward0>)



g Graph(num_nodes=135920, num_edges=1463720,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)})



 output, 
h5 tensor([[-3.5411e-01],
        [-3.8310e-01],
        [-4.2268e-01],
        ...,
        [-4.6126e-06],
        [-7.6696e-06],
        [-1.0959e-05]], device='cuda:0', grad_fn=<AddBackward0>) 
h5.shape torch.Size([135920, 1]) 
h5.sum tensor(-24582.8203, device='cuda:0', grad_fn=<SumBackward0>) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', grad_fn=<CatBackward0>) 
g.edata[efet].shape torch.Size([1463720, 1]) 
g.edata[efet].sum tensor(1463720., device='cuda:0', grad_fn=<SumBackward0>)

Passing two random events from the network before training 
result1: tensor([[-0.6282],
        [-0.4425],
        [-0.2978],
        ...,
        [ 0.0000],
        [ 0.0000],
        [ 0.0000]], device='cuda:0', grad_fn=<AddBackward0>) 
result1.shape: torch.Size([6796, 1]) 
input: tensor([0., 0., 0.,  ..., 0., 0., 0.], device='cuda:0')
=> loading checkpoint from /hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLBhaGcnReNewestweight7N4/checkpoint_dir/90016284saved_checkpoint.tar



load_model True 
TraEvN 9001 
BatchSize 30.0 
EpochNum 6 
LrVal 0.0001 
weight_decay 5e-05 
startmesh 284 
endmesh 285 






input node feature: 
g.ndata[nfet] tensor([[0.0000],
        [0.7681],
        [0.0000],
        ...,
        [0.0000],
        [0.0000],
        [0.0000]]) 
g.ndata[nfet].shape torch.Size([67960, 1]) 
g.ndata[nfet].sum tensor(548.4788)



input graph: 
g Graph(num_nodes=67960, num_edges=731860,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)}) 
g.edata[efet].shape torch.Size([731860, 1]) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], grad_fn=<ToCopyBackward0>) 
g.edata[efet].sum tensor(731860., grad_fn=<SumBackward0>) 
g.ndata[nfet].shape torch.Size([67960, 1]) 
g.ndata[nfet] tensor([[0.0000],
        [0.7681],
        [0.0000],
        ...,
        [0.0000],
        [0.0000],
        [0.0000]]) 
g.ndata[nfet].sum tensor(548.4788)
param0_0.shape torch.Size([256])
param.data[:, 0].shape torch.Size([256])



h after the first convolutional layer: 
 tensor([[-3.1328e-04, -4.5823e-03,  1.3640e-02,  ...,  1.4443e-02,
         -2.4853e-22, -8.1416e-04],
        [-3.1328e-04, -4.9352e-03, -6.8306e-04,  ..., -1.0669e-03,
         -2.4853e-22, -8.1625e-04],
        [-3.1328e-04, -4.4864e-03,  1.7536e-02,  ...,  1.8661e-02,
         -2.4853e-22, -8.1359e-04],
        ...,
        [-3.1328e-04, -4.9352e-03, -6.8306e-04,  ..., -1.0669e-03,
         -2.4853e-22, -8.1625e-04],
        [-3.1328e-04, -4.9352e-03, -6.8306e-04,  ..., -1.0669e-03,
         -2.4853e-22, -8.1625e-04],
        [-3.1328e-04, -4.9352e-03, -6.8306e-04,  ..., -1.0669e-03,
         -2.4853e-22, -8.1625e-04]], grad_fn=<AddBackward0>) 
h.shape torch.Size([67960, 256]) 
h.sum tensor(1305.8704, grad_fn=<SumBackward0>)



h[:, 0].sum tensor(-21.2904, grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[0] tensor(77.9601, device='cuda:0')



h[100].sum tensor(-1.6736, grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[100] tensor(78.6094, device='cuda:0')



h[200].sum tensor(166.0773, grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[200] tensor(-36.8436, device='cuda:0')



h1 after relu, the first updating, and another relu: 
 tensor([[0.0000, 0.0000, 0.0110,  ..., 0.0116, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0564,  ..., 0.0597, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0202,  ..., 0.0209, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       grad_fn=<ReluBackward0>) 
h.shape torch.Size([67960, 256]) 
h.sum tensor(237866.1250, grad_fn=<SumBackward0>)



h2 after the second convolutional layer: 
 tensor([[0.0000, 0.0000, 0.1356,  ..., 0.0000, 0.2198, 0.3187],
        [0.0000, 0.0000, 0.0736,  ..., 0.0000, 0.3955, 0.4766],
        [0.0000, 0.0000, 0.0765,  ..., 0.0000, 0.3302, 0.4184],
        ...,
        [0.0000, 0.0000, 0.2059,  ..., 0.0000, 0.0278, 0.1438],
        [0.0000, 0.0000, 0.2059,  ..., 0.0000, 0.0278, 0.1438],
        [0.0000, 0.0000, 0.2059,  ..., 0.0000, 0.0278, 0.1438]],
       grad_fn=<ReluBackward0>) 
h2.shape torch.Size([67960, 128]) 
h2.sum tensor(2150758., grad_fn=<SumBackward0>)



h2[0].sum tensor(0., grad_fn=<SumBackward0>)
Traceback (most recent call last):
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLBhaGcnReNewestweight7N4/./Results.py", line 38, in <module>
    result1 = net(batcheddglgraph, TraTen[10000:10010].reshape(10 * 6796, 1).to('cpu'))
  File "/hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLBhaGcnReNewestweight7N4/ModelBha.py", line 105, in forward
    print('\n(h1.sum(axis=0) * param0_2).sum() + bias0', (h1.sum(axis=0) * param0_2).sum() + bias0)
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!

real	0m28.222s
user	0m20.397s
sys	0m5.256s
