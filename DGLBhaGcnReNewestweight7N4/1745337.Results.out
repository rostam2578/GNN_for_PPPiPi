0: cmsgpu001.ihep.ac.cn
GPU 0: NVIDIA A100-PCIE-40GB (UUID: GPU-83673d1f-01b2-490d-5bc6-a84aaf3ddc65)
Allocate GPU cards : 0

modinfo:
filename:       /lib/modules/3.10.0-1160.71.1.el7.x86_64/extra/nvidia.ko.xz
firmware:       nvidia/515.65.01/gsp.bin
alias:          char-major-195-*
version:        515.65.01
supported:      external
license:        NVIDIA
retpoline:      Y
rhelversion:    7.9
srcversion:     8049D44E2C1B08F41E1B8A6
alias:          pci:v000010DEd*sv*sd*bc06sc80i00*
alias:          pci:v000010DEd*sv*sd*bc03sc02i00*
alias:          pci:v000010DEd*sv*sd*bc03sc00i00*
depends:        drm
vermagic:       3.10.0-1160.71.1.el7.x86_64 SMP mod_unload modversions 
signer:         DKMS module signing key
sig_key:        9B:9E:55:A9:86:D9:50:0B:6D:2D:9F:BA:A7:E6:45:39:D4:DD:5F:C6
sig_hashalgo:   sha512
parm:           NvSwitchRegDwords:NvSwitch regkey (charp)
parm:           NvSwitchBlacklist:NvSwitchBlacklist=uuid[,uuid...] (charp)
parm:           NVreg_ResmanDebugLevel:int
parm:           NVreg_RmLogonRC:int
parm:           NVreg_ModifyDeviceFiles:int
parm:           NVreg_DeviceFileUID:int
parm:           NVreg_DeviceFileGID:int
parm:           NVreg_DeviceFileMode:int
parm:           NVreg_InitializeSystemMemoryAllocations:int
parm:           NVreg_UsePageAttributeTable:int
parm:           NVreg_EnablePCIeGen3:int
parm:           NVreg_EnableMSI:int
parm:           NVreg_TCEBypassMode:int
parm:           NVreg_EnableStreamMemOPs:int
parm:           NVreg_RestrictProfilingToAdminUsers:int
parm:           NVreg_PreserveVideoMemoryAllocations:int
parm:           NVreg_EnableS0ixPowerManagement:int
parm:           NVreg_S0ixPowerManagementVideoMemoryThreshold:int
parm:           NVreg_DynamicPowerManagement:int
parm:           NVreg_DynamicPowerManagementVideoMemoryThreshold:int
parm:           NVreg_EnableGpuFirmware:int
parm:           NVreg_EnableGpuFirmwareLogs:int
parm:           NVreg_OpenRmEnableUnsupportedGpus:int
parm:           NVreg_EnableUserNUMAManagement:int
parm:           NVreg_MemoryPoolSize:int
parm:           NVreg_KMallocHeapMaxSize:int
parm:           NVreg_VMallocHeapMaxSize:int
parm:           NVreg_IgnoreMMIOCheck:int
parm:           NVreg_NvLinkDisable:int
parm:           NVreg_EnablePCIERelaxedOrderingMode:int
parm:           NVreg_RegisterPCIDriver:int
parm:           NVreg_EnableDbgBreakpoint:int
parm:           NVreg_RegistryDwords:charp
parm:           NVreg_RegistryDwordsPerDevice:charp
parm:           NVreg_RmMsg:charp
parm:           NVreg_GpuBlacklist:charp
parm:           NVreg_TemporaryFilePath:charp
parm:           NVreg_ExcludedGpus:charp
parm:           NVreg_DmaRemapPeerMmio:int
parm:           rm_firmware_active:charp

nvidia-smi:
Sat Sep 17 12:18:05 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 515.65.01    Driver Version: 515.65.01    CUDA Version: 11.7     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  NVIDIA A100-PCI...  On   | 00000000:3B:00.0 Off |                    0 |
| N/A   24C    P0    32W / 250W |      0MiB / 40960MiB |      0%      Default |
|                               |                      |             Disabled |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+

nvcc --version:
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2021 NVIDIA Corporation
Built on Sun_Mar_21_19:15:46_PDT_2021
Cuda compilation tools, release 11.3, V11.3.58
Build cuda_11.3.r11.3/compiler.29745058_0

 torch version: 1.10.2

 cuda version: 11.3

 is cuda available: True

 CUDNN VERSION: 8200

 Number CUDA Devices: 1

 CUDA Device Name: NVIDIA A100-PCIE-40GB

 CUDA Device Total Memory [GB]: 42.358472704

 Device capability: (8, 0) 

 Cuda deviice: <torch.cuda.device object at 0x2acdf8b648e0> 

 Is cuda initialized: True

 CUDA_HOME: /hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1

real	0m4.420s
user	0m2.416s
sys	0m1.102s
/hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/cupy/_environment.py:438: UserWarning: 
--------------------------------------------------------------------------------

  CuPy may not function correctly because multiple CuPy packages are installed
  in your environment:

    cupy, cupy-cuda110

  Follow these steps to resolve this issue:

    1. For all packages listed above, run the following command to remove all
       existing CuPy installations:

         $ pip uninstall <package_name>

      If you previously installed CuPy via conda, also run the following:

         $ conda uninstall cupy

    2. Install the appropriate CuPy package.
       Refer to the Installation Guide for detailed instructions.

         https://docs.cupy.dev/en/stable/install.html

--------------------------------------------------------------------------------

  warnings.warn(f'''
[12:18:27] /opt/dgl/src/runtime/tensordispatch.cc:43: TensorDispatcher: dlopen failed: /hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/dgl/tensoradapter/pytorch/libtensoradapter_pytorch_1.10.2.so: cannot open shared object file: No such file or directory
Using backend: pytorch





 Loading data ... 



training set shape (80000, 6796) 
sum 8401300

target set shape (80000, 6796) 
sum 5574226

TraTen and TrvTen shape:
 torch.Size([80000, 6796]) torch.Size([80000, 6796])




 The Network ... 






 The graph ... 



edge_index
 tensor([[   0,    1,    2,  ..., 4907, 4907, 4907],
        [   1,    2,    3,  ..., 4918, 4919, 4920]]) 

edge_index shape
 torch.Size([2, 36593])
graph: Graph(num_nodes=6796, num_edges=36593,
      ndata_schemes={}
      edata_schemes={}) 
nodes: tensor([   0,    1,    2,  ..., 6793, 6794, 6795], device='cuda:0') 
nodes shape: torch.Size([6796]) 
edges: (tensor([   0,    1,    2,  ..., 4907, 4907, 4907], device='cuda:0'), tensor([   1,    2,    3,  ..., 4918, 4919, 4920], device='cuda:0')) 
edges shae:

number of nodes: 6796

number of edges: 73186

node features (random input): tensor([[ 0.0131],
        [-0.7280],
        [ 1.3589],
        ...,
        [-0.3050],
        [ 0.9677],
        [-0.1830]], device='cuda:0', requires_grad=True) 
node features sum: tensor(-69.0439, device='cuda:0', grad_fn=<SumBackward0>)

edges features: tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
edges features sum: tensor(73186., device='cuda:0', grad_fn=<SumBackward0>)

example: 
Out degrees of node 234: 14

In degrees of node 234: 14
Model name: DGLBhaGcnReNewestweight7N4

net GCN(
  (conv1): GraphConv(in=1, out=256, normalization=both, activation=None)
  (conv2): GraphConv(in=256, out=128, normalization=both, activation=None)
  (conv3): GraphConv(in=128, out=64, normalization=both, activation=None)
  (conv4): GraphConv(in=64, out=32, normalization=both, activation=None)
  (conv5): GraphConv(in=32, out=1, normalization=both, activation=None)
) 
number of the free learnable parameters: 43777

parameters of the network:

name conv1.weight 
shape:
 torch.Size([1, 256]) 
grad:
 True 
date:
 tensor([[-0.0238, -0.1234,  0.0264, -0.0035,  0.0104, -0.0217,  0.0752,  0.0751,
         -0.1282, -0.0066,  0.0170, -0.0573,  0.1002, -0.0701,  0.0739,  0.0773,
         -0.1493, -0.0342,  0.0063,  0.0353,  0.1127, -0.0471, -0.0882, -0.1008,
          0.0081,  0.0602, -0.0727, -0.0796, -0.0139,  0.0503, -0.0069,  0.0597,
         -0.1115,  0.0948,  0.0071, -0.0762, -0.1086, -0.0933,  0.1019, -0.1009,
         -0.0439, -0.0044,  0.0665,  0.1212,  0.0031, -0.1154, -0.0199, -0.0861,
          0.1257,  0.0548,  0.0319,  0.0753, -0.1471, -0.0218, -0.0584,  0.1414,
         -0.1483, -0.0824,  0.1256,  0.0239,  0.0783, -0.0634,  0.0487,  0.0625,
          0.1380,  0.0958, -0.1254,  0.0155,  0.0417,  0.1364, -0.0513, -0.1012,
          0.0013,  0.0951,  0.0753, -0.1227, -0.1311, -0.0202,  0.0193, -0.1327,
          0.0689,  0.1085,  0.0078,  0.0626,  0.0082, -0.0474,  0.1232,  0.0250,
         -0.0349, -0.0205,  0.1090,  0.1401, -0.0565, -0.1261,  0.1479, -0.1144,
          0.0644,  0.1292,  0.0777, -0.1424, -0.1163,  0.0020, -0.0640, -0.0712,
          0.0750,  0.0406, -0.0780, -0.0789,  0.0969, -0.0404, -0.1332,  0.1388,
         -0.1081,  0.0638, -0.0349,  0.0370,  0.1386,  0.0708, -0.0985, -0.0188,
         -0.0238,  0.0838, -0.0135, -0.0265,  0.0793,  0.0828,  0.1026, -0.0548,
         -0.1107, -0.0038, -0.0586,  0.0328, -0.0542,  0.0584, -0.0302, -0.0767,
         -0.0487, -0.1356, -0.1224,  0.0556, -0.1477, -0.0022, -0.1107,  0.0102,
         -0.0451, -0.1454, -0.0297,  0.1038,  0.0644,  0.1266, -0.0451, -0.1466,
         -0.0163,  0.1079, -0.0341,  0.0924, -0.1398,  0.0634,  0.1138, -0.1407,
         -0.1100,  0.1236, -0.0890, -0.0015,  0.1076, -0.1292, -0.0220, -0.0700,
          0.1359, -0.0384,  0.0850, -0.1504, -0.0660,  0.1484, -0.0986, -0.1063,
         -0.0190, -0.0275,  0.0508,  0.0249,  0.0276,  0.1007, -0.0816,  0.0548,
         -0.1172,  0.0187, -0.0874,  0.0380,  0.0638,  0.0220, -0.0356,  0.0477,
         -0.1411,  0.0519, -0.0891, -0.0015,  0.0689,  0.0941,  0.1030, -0.0818,
         -0.1371,  0.1236,  0.1230,  0.0785, -0.0309, -0.1004,  0.0223, -0.1075,
          0.1131,  0.0165, -0.0557, -0.0448,  0.0089,  0.0773, -0.1367, -0.0507,
          0.1285,  0.0119,  0.0776,  0.0238, -0.0347, -0.0683, -0.1141, -0.0700,
         -0.0797, -0.1256, -0.0806, -0.1358, -0.0797, -0.0081,  0.1275, -0.0597,
          0.0305, -0.0566, -0.1177, -0.0147, -0.0742,  0.1213,  0.0271, -0.0390,
          0.1120, -0.0862,  0.1227,  0.0950, -0.0258,  0.0809, -0.1452,  0.1044,
          0.1393, -0.0635, -0.0777,  0.0930, -0.1379,  0.0136, -0.0034,  0.0788]],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([[-0.0238, -0.1234,  0.0264, -0.0035,  0.0104, -0.0217,  0.0752,  0.0751,
         -0.1282, -0.0066,  0.0170, -0.0573,  0.1002, -0.0701,  0.0739,  0.0773,
         -0.1493, -0.0342,  0.0063,  0.0353,  0.1127, -0.0471, -0.0882, -0.1008,
          0.0081,  0.0602, -0.0727, -0.0796, -0.0139,  0.0503, -0.0069,  0.0597,
         -0.1115,  0.0948,  0.0071, -0.0762, -0.1086, -0.0933,  0.1019, -0.1009,
         -0.0439, -0.0044,  0.0665,  0.1212,  0.0031, -0.1154, -0.0199, -0.0861,
          0.1257,  0.0548,  0.0319,  0.0753, -0.1471, -0.0218, -0.0584,  0.1414,
         -0.1483, -0.0824,  0.1256,  0.0239,  0.0783, -0.0634,  0.0487,  0.0625,
          0.1380,  0.0958, -0.1254,  0.0155,  0.0417,  0.1364, -0.0513, -0.1012,
          0.0013,  0.0951,  0.0753, -0.1227, -0.1311, -0.0202,  0.0193, -0.1327,
          0.0689,  0.1085,  0.0078,  0.0626,  0.0082, -0.0474,  0.1232,  0.0250,
         -0.0349, -0.0205,  0.1090,  0.1401, -0.0565, -0.1261,  0.1479, -0.1144,
          0.0644,  0.1292,  0.0777, -0.1424, -0.1163,  0.0020, -0.0640, -0.0712,
          0.0750,  0.0406, -0.0780, -0.0789,  0.0969, -0.0404, -0.1332,  0.1388,
         -0.1081,  0.0638, -0.0349,  0.0370,  0.1386,  0.0708, -0.0985, -0.0188,
         -0.0238,  0.0838, -0.0135, -0.0265,  0.0793,  0.0828,  0.1026, -0.0548,
         -0.1107, -0.0038, -0.0586,  0.0328, -0.0542,  0.0584, -0.0302, -0.0767,
         -0.0487, -0.1356, -0.1224,  0.0556, -0.1477, -0.0022, -0.1107,  0.0102,
         -0.0451, -0.1454, -0.0297,  0.1038,  0.0644,  0.1266, -0.0451, -0.1466,
         -0.0163,  0.1079, -0.0341,  0.0924, -0.1398,  0.0634,  0.1138, -0.1407,
         -0.1100,  0.1236, -0.0890, -0.0015,  0.1076, -0.1292, -0.0220, -0.0700,
          0.1359, -0.0384,  0.0850, -0.1504, -0.0660,  0.1484, -0.0986, -0.1063,
         -0.0190, -0.0275,  0.0508,  0.0249,  0.0276,  0.1007, -0.0816,  0.0548,
         -0.1172,  0.0187, -0.0874,  0.0380,  0.0638,  0.0220, -0.0356,  0.0477,
         -0.1411,  0.0519, -0.0891, -0.0015,  0.0689,  0.0941,  0.1030, -0.0818,
         -0.1371,  0.1236,  0.1230,  0.0785, -0.0309, -0.1004,  0.0223, -0.1075,
          0.1131,  0.0165, -0.0557, -0.0448,  0.0089,  0.0773, -0.1367, -0.0507,
          0.1285,  0.0119,  0.0776,  0.0238, -0.0347, -0.0683, -0.1141, -0.0700,
         -0.0797, -0.1256, -0.0806, -0.1358, -0.0797, -0.0081,  0.1275, -0.0597,
          0.0305, -0.0566, -0.1177, -0.0147, -0.0742,  0.1213,  0.0271, -0.0390,
          0.1120, -0.0862,  0.1227,  0.0950, -0.0258,  0.0809, -0.1452,  0.1044,
          0.1393, -0.0635, -0.0777,  0.0930, -0.1379,  0.0136, -0.0034,  0.0788]],
       device='cuda:0', requires_grad=True)

name conv1.bias 
shape:
 torch.Size([256]) 
grad:
 True 
date:
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)

name conv2.weight 
shape:
 torch.Size([256, 128]) 
grad:
 True 
date:
 tensor([[ 0.0704, -0.0978, -0.1246,  ...,  0.0786,  0.0822, -0.0663],
        [ 0.0958,  0.0045, -0.0393,  ..., -0.0686,  0.1128,  0.0773],
        [ 0.0725, -0.0656, -0.0689,  ..., -0.0915,  0.0774, -0.0338],
        ...,
        [ 0.0903,  0.0612, -0.0880,  ..., -0.1012, -0.0617, -0.0916],
        [-0.0413, -0.1054,  0.0577,  ..., -0.1158, -0.0311,  0.0660],
        [ 0.0853, -0.0848,  0.0695,  ..., -0.0883, -0.0806,  0.0857]],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([[ 0.0704, -0.0978, -0.1246,  ...,  0.0786,  0.0822, -0.0663],
        [ 0.0958,  0.0045, -0.0393,  ..., -0.0686,  0.1128,  0.0773],
        [ 0.0725, -0.0656, -0.0689,  ..., -0.0915,  0.0774, -0.0338],
        ...,
        [ 0.0903,  0.0612, -0.0880,  ..., -0.1012, -0.0617, -0.0916],
        [-0.0413, -0.1054,  0.0577,  ..., -0.1158, -0.0311,  0.0660],
        [ 0.0853, -0.0848,  0.0695,  ..., -0.0883, -0.0806,  0.0857]],
       device='cuda:0', requires_grad=True)

name conv2.bias 
shape:
 torch.Size([128]) 
grad:
 True 
date:
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
parameter:
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)

name conv3.weight 
shape:
 torch.Size([128, 64]) 
grad:
 True 
date:
 tensor([[ 0.0248,  0.0218, -0.0417,  ..., -0.0717,  0.1618,  0.1617],
        [ 0.0979,  0.0053, -0.0850,  ..., -0.1124,  0.1461,  0.1473],
        [-0.1612,  0.1701, -0.0358,  ..., -0.0321,  0.1510, -0.0436],
        ...,
        [ 0.0657,  0.0086,  0.1339,  ..., -0.0299, -0.0862, -0.0594],
        [ 0.0743,  0.0273,  0.0382,  ...,  0.0012, -0.0578,  0.1396],
        [ 0.0019, -0.0918,  0.0038,  ..., -0.0251, -0.1387,  0.0503]],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([[ 0.0248,  0.0218, -0.0417,  ..., -0.0717,  0.1618,  0.1617],
        [ 0.0979,  0.0053, -0.0850,  ..., -0.1124,  0.1461,  0.1473],
        [-0.1612,  0.1701, -0.0358,  ..., -0.0321,  0.1510, -0.0436],
        ...,
        [ 0.0657,  0.0086,  0.1339,  ..., -0.0299, -0.0862, -0.0594],
        [ 0.0743,  0.0273,  0.0382,  ...,  0.0012, -0.0578,  0.1396],
        [ 0.0019, -0.0918,  0.0038,  ..., -0.0251, -0.1387,  0.0503]],
       device='cuda:0', requires_grad=True)

name conv3.bias 
shape:
 torch.Size([64]) 
grad:
 True 
date:
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)

name conv4.weight 
shape:
 torch.Size([64, 32]) 
grad:
 True 
date:
 tensor([[-0.0794, -0.2359, -0.1727,  ...,  0.0148, -0.0483, -0.0442],
        [ 0.2147,  0.0379,  0.0407,  ...,  0.1339, -0.1984, -0.0144],
        [ 0.0151,  0.0366,  0.0659,  ...,  0.0598,  0.1581, -0.0986],
        ...,
        [ 0.0516,  0.1428, -0.0504,  ...,  0.2189, -0.1003,  0.0740],
        [-0.0769,  0.2225, -0.1022,  ...,  0.0926, -0.0641, -0.0667],
        [-0.0927, -0.2012,  0.0613,  ..., -0.1169,  0.1454,  0.1849]],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([[-0.0794, -0.2359, -0.1727,  ...,  0.0148, -0.0483, -0.0442],
        [ 0.2147,  0.0379,  0.0407,  ...,  0.1339, -0.1984, -0.0144],
        [ 0.0151,  0.0366,  0.0659,  ...,  0.0598,  0.1581, -0.0986],
        ...,
        [ 0.0516,  0.1428, -0.0504,  ...,  0.2189, -0.1003,  0.0740],
        [-0.0769,  0.2225, -0.1022,  ...,  0.0926, -0.0641, -0.0667],
        [-0.0927, -0.2012,  0.0613,  ..., -0.1169,  0.1454,  0.1849]],
       device='cuda:0', requires_grad=True)

name conv4.bias 
shape:
 torch.Size([32]) 
grad:
 True 
date:
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
parameter:
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)

name conv5.weight 
shape:
 torch.Size([32, 1]) 
grad:
 True 
date:
 tensor([[-0.2715],
        [-0.2384],
        [ 0.3677],
        [-0.1002],
        [-0.1317],
        [-0.0597],
        [-0.2233],
        [-0.3538],
        [-0.3145],
        [-0.3188],
        [ 0.0646],
        [-0.0478],
        [-0.1577],
        [ 0.0472],
        [-0.2201],
        [-0.2756],
        [-0.0275],
        [ 0.2580],
        [-0.2039],
        [-0.2846],
        [-0.2017],
        [ 0.2491],
        [ 0.3117],
        [-0.3229],
        [ 0.2430],
        [ 0.2903],
        [ 0.3199],
        [ 0.3026],
        [ 0.1883],
        [-0.0161],
        [-0.0764],
        [ 0.1896]], device='cuda:0') 
parameter:
 Parameter containing:
tensor([[-0.2715],
        [-0.2384],
        [ 0.3677],
        [-0.1002],
        [-0.1317],
        [-0.0597],
        [-0.2233],
        [-0.3538],
        [-0.3145],
        [-0.3188],
        [ 0.0646],
        [-0.0478],
        [-0.1577],
        [ 0.0472],
        [-0.2201],
        [-0.2756],
        [-0.0275],
        [ 0.2580],
        [-0.2039],
        [-0.2846],
        [-0.2017],
        [ 0.2491],
        [ 0.3117],
        [-0.3229],
        [ 0.2430],
        [ 0.2903],
        [ 0.3199],
        [ 0.3026],
        [ 0.1883],
        [-0.0161],
        [-0.0764],
        [ 0.1896]], device='cuda:0', requires_grad=True)

name conv5.bias 
shape:
 torch.Size([1]) 
grad:
 True 
date:
 tensor([0.], device='cuda:0') 
parameter:
 Parameter containing:
tensor([0.], device='cuda:0', requires_grad=True)



input node feature: 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].shape torch.Size([6796, 1]) 
g.ndata[nfet].sum tensor(82.4738, device='cuda:0')



input graph: 
g Graph(num_nodes=6796, num_edges=73186,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)}) 
g.edata[efet].shape torch.Size([73186, 1]) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
g.edata[efet].sum tensor(73186., device='cuda:0', grad_fn=<SumBackward0>) 
g.ndata[nfet].shape torch.Size([6796, 1]) 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].sum tensor(82.4738, device='cuda:0')
param0_0.shape torch.Size([256])
param.data[:, 0].shape torch.Size([256])



h after the first convolutional layer: 
 tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0',
       grad_fn=<AddBackward0>) 
h.shape torch.Size([6796, 256]) 
h.sum tensor(72.4199, device='cuda:0', grad_fn=<SumBackward0>)



h[:, 0].sum tensor(10.0574, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[0] tensor(10.2825, device='cuda:0')



h[100].sum tensor(-7.7792, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[100] tensor(-7.9533, device='cuda:0')



h[200].sum tensor(-0.5413, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[200] tensor(-0.5534, device='cuda:0')



h1 after relu, the first updating, and another relu: 
 tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0',
       grad_fn=<ReluBackward0>) 
h.shape torch.Size([6796, 256]) 
h.sum tensor(10481.8799, device='cuda:0', grad_fn=<SumBackward0>)



h2 after the second convolutional layer: 
 tensor([[0.0186, 0.0073, 0.0000,  ..., 0.0000, 0.0195, 0.0000],
        [0.0087, 0.0034, 0.0000,  ..., 0.0000, 0.0091, 0.0000],
        [0.0025, 0.0010, 0.0000,  ..., 0.0000, 0.0026, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0', grad_fn=<ReluBackward0>) 
h2.shape torch.Size([6796, 128]) 
h2.sum tensor(44680.3203, device='cuda:0', grad_fn=<SumBackward0>)



h2[0].sum tensor(1878.6487, device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param0_2).sum() + bias0 tensor(119.4549, device='cuda:0', grad_fn=<AddBackward0>)



h2[100].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param50_2).sum() + bias50 tensor(-25.1013, device='cuda:0', grad_fn=<AddBackward0>)



h2[200].sum tensor(846.3144, device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param100_2).sum() + bias100 tensor(53.8196, device='cuda:0', grad_fn=<AddBackward0>)



g Graph(num_nodes=6796, num_edges=73186,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)})



 output, 
h5 tensor([[-0.3083],
        [-0.2172],
        [-0.1462],
        ...,
        [ 0.0000],
        [ 0.0000],
        [ 0.0000]], device='cuda:0', grad_fn=<AddBackward0>) 
h5.shape torch.Size([6796, 1]) 
h5.sum tensor(-14265.9512, device='cuda:0', grad_fn=<SumBackward0>) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
g.edata[efet].shape torch.Size([73186, 1]) 
g.edata[efet].sum tensor(73186., device='cuda:0', grad_fn=<SumBackward0>)

Passing event 1007 from the network before training input tensor([0., 0., 0.,  ..., 0., 0., 0.], device='cuda:0') 
result1: tensor([[-0.3083],
        [-0.2172],
        [-0.1462],
        ...,
        [ 0.0000],
        [ 0.0000],
        [ 0.0000]], device='cuda:0', grad_fn=<AddBackward0>) 
result1.shape: torch.Size([6796, 1])



input node feature: 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].shape torch.Size([135920, 1]) 
g.ndata[nfet].sum tensor(989.0452, device='cuda:0')



input graph: 
g Graph(num_nodes=135920, num_edges=1463720,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)}) 
g.edata[efet].shape torch.Size([1463720, 1]) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', grad_fn=<CatBackward0>) 
g.edata[efet].sum tensor(1463720., device='cuda:0', grad_fn=<SumBackward0>) 
g.ndata[nfet].shape torch.Size([135920, 1]) 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].sum tensor(989.0452, device='cuda:0')
param0_0.shape torch.Size([256])
param.data[:, 0].shape torch.Size([256])



h after the first convolutional layer: 
 tensor([[ 0.0067, -0.0019,  0.0158,  ..., -0.0083,  0.0122,  0.0007],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        ...,
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000]],
       device='cuda:0', grad_fn=<AddBackward0>) 
h.shape torch.Size([135920, 256]) 
h.sum tensor(1058.5183, device='cuda:0', grad_fn=<SumBackward0>)



h[:, 0].sum tensor(43.8358, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[0] tensor(44.9363, device='cuda:0')



h[100].sum tensor(9.4942, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[100] tensor(9.7326, device='cuda:0')



h[200].sum tensor(-117.1958, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[200] tensor(-120.1379, device='cuda:0')



h1 after relu, the first updating, and another relu: 
 tensor([[0.0252, 0.0000, 0.0596,  ..., 0.0000, 0.0460, 0.0025],
        [0.0207, 0.0000, 0.0491,  ..., 0.0000, 0.0378, 0.0021],
        [0.0049, 0.0000, 0.0115,  ..., 0.0000, 0.0088, 0.0005],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0', grad_fn=<ReluBackward0>) 
h.shape torch.Size([135920, 256]) 
h.sum tensor(106484.3672, device='cuda:0', grad_fn=<SumBackward0>)



h2 after the second convolutional layer: 
 tensor([[0.0000, 0.0000, 0.2926,  ..., 0.0000, 0.0000, 0.3517],
        [0.0000, 0.0000, 0.2508,  ..., 0.0000, 0.0000, 0.3014],
        [0.0000, 0.0000, 0.2013,  ..., 0.0000, 0.0000, 0.2420],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0', grad_fn=<ReluBackward0>) 
h2.shape torch.Size([135920, 128]) 
h2.sum tensor(588350.6250, device='cuda:0', grad_fn=<SumBackward0>)



h2[0].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param0_2).sum() + bias0 tensor(-1222.8313, device='cuda:0', grad_fn=<AddBackward0>)



h2[100].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param50_2).sum() + bias50 tensor(-1461.4371, device='cuda:0', grad_fn=<AddBackward0>)



h2[200].sum tensor(12359.0908, device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param100_2).sum() + bias100 tensor(865.7164, device='cuda:0', grad_fn=<AddBackward0>)



g Graph(num_nodes=135920, num_edges=1463720,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)})



 output, 
h5 tensor([[-1.3127e+00],
        [-1.4205e+00],
        [-1.5676e+00],
        ...,
        [-1.7107e-05],
        [-2.8434e-05],
        [-4.0640e-05]], device='cuda:0', grad_fn=<AddBackward0>) 
h5.shape torch.Size([135920, 1]) 
h5.sum tensor(-91139.4844, device='cuda:0', grad_fn=<SumBackward0>) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', grad_fn=<CatBackward0>) 
g.edata[efet].shape torch.Size([1463720, 1]) 
g.edata[efet].sum tensor(1463720., device='cuda:0', grad_fn=<SumBackward0>)

Passing two random events from the network before training 
result1: tensor([[-0.3083],
        [-0.2172],
        [-0.1462],
        ...,
        [ 0.0000],
        [ 0.0000],
        [ 0.0000]], device='cuda:0', grad_fn=<AddBackward0>) 
result1.shape: torch.Size([6796, 1]) 
input: tensor([0., 0., 0.,  ..., 0., 0., 0.], device='cuda:0')
=> loading checkpoint from /hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLBhaGcnReNewestweight7N4/checkpoint_dir/90016284saved_checkpoint.tar



load_model True 
TraEvN 9001 
BatchSize 30.0 
EpochNum 6 
LrVal 0.0001 
weight_decay 5e-05 
startmesh 284 
endmesh 285 




net GCN(
  (conv1): GraphConv(in=1, out=256, normalization=both, activation=None)
  (conv2): GraphConv(in=256, out=128, normalization=both, activation=None)
  (conv3): GraphConv(in=128, out=64, normalization=both, activation=None)
  (conv4): GraphConv(in=64, out=32, normalization=both, activation=None)
  (conv5): GraphConv(in=32, out=1, normalization=both, activation=None)
) 
batcheddglgraph Graph(num_nodes=67960, num_edges=731860,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)}) 
TraTen tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.3054, 0.5586, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')



input node feature: 
g.ndata[nfet] tensor([[0.0000],
        [0.7681],
        [0.0000],
        ...,
        [0.0000],
        [0.0000],
        [0.0000]]) 
g.ndata[nfet].shape torch.Size([67960, 1]) 
g.ndata[nfet].sum tensor(548.4788)



input graph: 
g Graph(num_nodes=67960, num_edges=731860,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)}) 
g.edata[efet].shape torch.Size([731860, 1]) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], grad_fn=<ToCopyBackward0>) 
g.edata[efet].sum tensor(731860., grad_fn=<SumBackward0>) 
g.ndata[nfet].shape torch.Size([67960, 1]) 
g.ndata[nfet] tensor([[0.0000],
        [0.7681],
        [0.0000],
        ...,
        [0.0000],
        [0.0000],
        [0.0000]]) 
g.ndata[nfet].sum tensor(548.4788)
param0_0.shape torch.Size([256])
param.data[:, 0].shape torch.Size([256])



h after the first convolutional layer: 
 tensor([[-3.1328e-04, -4.5823e-03,  1.3640e-02,  ...,  1.4443e-02,
         -2.4853e-22, -8.1416e-04],
        [-3.1328e-04, -4.9352e-03, -6.8306e-04,  ..., -1.0669e-03,
         -2.4853e-22, -8.1625e-04],
        [-3.1328e-04, -4.4864e-03,  1.7536e-02,  ...,  1.8661e-02,
         -2.4853e-22, -8.1359e-04],
        ...,
        [-3.1328e-04, -4.9352e-03, -6.8306e-04,  ..., -1.0669e-03,
         -2.4853e-22, -8.1625e-04],
        [-3.1328e-04, -4.9352e-03, -6.8306e-04,  ..., -1.0669e-03,
         -2.4853e-22, -8.1625e-04],
        [-3.1328e-04, -4.9352e-03, -6.8306e-04,  ..., -1.0669e-03,
         -2.4853e-22, -8.1625e-04]], grad_fn=<AddBackward0>) 
h.shape torch.Size([67960, 256]) 
h.sum tensor(1305.8704, grad_fn=<SumBackward0>)



h[:, 0].sum tensor(-21.2904, grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[0] tensor(24.9196, device='cuda:0')



h[100].sum tensor(-1.6736, grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[100] tensor(5.3972, device='cuda:0')



h[200].sum tensor(166.0773, grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[200] tensor(-66.6229, device='cuda:0')



h1 after relu, the first updating, and another relu: 
 tensor([[0.0000, 0.0000, 0.0110,  ..., 0.0116, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0564,  ..., 0.0597, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0202,  ..., 0.0209, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       grad_fn=<ReluBackward0>) 
h.shape torch.Size([67960, 256]) 
h.sum tensor(237866.1250, grad_fn=<SumBackward0>)



h2 after the second convolutional layer: 
 tensor([[0.0000, 0.0000, 0.1356,  ..., 0.0000, 0.2198, 0.3187],
        [0.0000, 0.0000, 0.0736,  ..., 0.0000, 0.3955, 0.4766],
        [0.0000, 0.0000, 0.0765,  ..., 0.0000, 0.3302, 0.4184],
        ...,
        [0.0000, 0.0000, 0.2059,  ..., 0.0000, 0.0278, 0.1438],
        [0.0000, 0.0000, 0.2059,  ..., 0.0000, 0.0278, 0.1438],
        [0.0000, 0.0000, 0.2059,  ..., 0.0000, 0.0278, 0.1438]],
       grad_fn=<ReluBackward0>) 
h2.shape torch.Size([67960, 128]) 
h2.sum tensor(2150758., grad_fn=<SumBackward0>)



h2[0].sum tensor(0., grad_fn=<SumBackward0>)
Traceback (most recent call last):
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLBhaGcnReNewestweight7N4/./Results.py", line 39, in <module>
    result1 = net(batcheddglgraph.to('cpu'), TraTen[10000:10010].reshape(10 * 6796, 1).to('cpu'))
  File "/hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLBhaGcnReNewestweight7N4/ModelBha.py", line 105, in forward
    print('\n(h1.sum(axis=0) * param0_2).sum() + bias0', (h1.sum(axis=0) * param0_2).sum() + bias0)
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!

real	0m27.182s
user	0m20.184s
sys	0m5.043s
