0: cmsgpu001.ihep.ac.cn
GPU 0: NVIDIA A100-PCIE-40GB (UUID: GPU-83673d1f-01b2-490d-5bc6-a84aaf3ddc65)
Allocate GPU cards : 0

modinfo:
filename:       /lib/modules/3.10.0-1160.71.1.el7.x86_64/extra/nvidia.ko.xz
firmware:       nvidia/515.65.01/gsp.bin
alias:          char-major-195-*
version:        515.65.01
supported:      external
license:        NVIDIA
retpoline:      Y
rhelversion:    7.9
srcversion:     8049D44E2C1B08F41E1B8A6
alias:          pci:v000010DEd*sv*sd*bc06sc80i00*
alias:          pci:v000010DEd*sv*sd*bc03sc02i00*
alias:          pci:v000010DEd*sv*sd*bc03sc00i00*
depends:        drm
vermagic:       3.10.0-1160.71.1.el7.x86_64 SMP mod_unload modversions 
signer:         DKMS module signing key
sig_key:        9B:9E:55:A9:86:D9:50:0B:6D:2D:9F:BA:A7:E6:45:39:D4:DD:5F:C6
sig_hashalgo:   sha512
parm:           NvSwitchRegDwords:NvSwitch regkey (charp)
parm:           NvSwitchBlacklist:NvSwitchBlacklist=uuid[,uuid...] (charp)
parm:           NVreg_ResmanDebugLevel:int
parm:           NVreg_RmLogonRC:int
parm:           NVreg_ModifyDeviceFiles:int
parm:           NVreg_DeviceFileUID:int
parm:           NVreg_DeviceFileGID:int
parm:           NVreg_DeviceFileMode:int
parm:           NVreg_InitializeSystemMemoryAllocations:int
parm:           NVreg_UsePageAttributeTable:int
parm:           NVreg_EnablePCIeGen3:int
parm:           NVreg_EnableMSI:int
parm:           NVreg_TCEBypassMode:int
parm:           NVreg_EnableStreamMemOPs:int
parm:           NVreg_RestrictProfilingToAdminUsers:int
parm:           NVreg_PreserveVideoMemoryAllocations:int
parm:           NVreg_EnableS0ixPowerManagement:int
parm:           NVreg_S0ixPowerManagementVideoMemoryThreshold:int
parm:           NVreg_DynamicPowerManagement:int
parm:           NVreg_DynamicPowerManagementVideoMemoryThreshold:int
parm:           NVreg_EnableGpuFirmware:int
parm:           NVreg_EnableGpuFirmwareLogs:int
parm:           NVreg_OpenRmEnableUnsupportedGpus:int
parm:           NVreg_EnableUserNUMAManagement:int
parm:           NVreg_MemoryPoolSize:int
parm:           NVreg_KMallocHeapMaxSize:int
parm:           NVreg_VMallocHeapMaxSize:int
parm:           NVreg_IgnoreMMIOCheck:int
parm:           NVreg_NvLinkDisable:int
parm:           NVreg_EnablePCIERelaxedOrderingMode:int
parm:           NVreg_RegisterPCIDriver:int
parm:           NVreg_EnableDbgBreakpoint:int
parm:           NVreg_RegistryDwords:charp
parm:           NVreg_RegistryDwordsPerDevice:charp
parm:           NVreg_RmMsg:charp
parm:           NVreg_GpuBlacklist:charp
parm:           NVreg_TemporaryFilePath:charp
parm:           NVreg_ExcludedGpus:charp
parm:           NVreg_DmaRemapPeerMmio:int
parm:           rm_firmware_active:charp

nvidia-smi:
Mon Sep 19 05:13:52 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 515.65.01    Driver Version: 515.65.01    CUDA Version: 11.7     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  NVIDIA A100-PCI...  On   | 00000000:3B:00.0 Off |                    0 |
| N/A   26C    P0    33W / 250W |      0MiB / 40960MiB |      0%      Default |
|                               |                      |             Disabled |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+

nvcc --version:
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2021 NVIDIA Corporation
Built on Sun_Mar_21_19:15:46_PDT_2021
Cuda compilation tools, release 11.3, V11.3.58
Build cuda_11.3.r11.3/compiler.29745058_0

 torch version: 1.10.2

 cuda version: 11.3

 is cuda available: True

 CUDNN VERSION: 8200

 Number CUDA Devices: 1

 CUDA Device Name: NVIDIA A100-PCIE-40GB

 CUDA Device Total Memory [GB]: 42.358472704

 Device capability: (8, 0) 

 Cuda deviice: <torch.cuda.device object at 0x2b0c202bc8e0> 

 Is cuda initialized: True

 CUDA_HOME: /hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1

real	0m53.807s
user	0m3.831s
sys	0m3.704s
/hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/cupy/_environment.py:438: UserWarning: 
--------------------------------------------------------------------------------

  CuPy may not function correctly because multiple CuPy packages are installed
  in your environment:

    cupy, cupy-cuda110

  Follow these steps to resolve this issue:

    1. For all packages listed above, run the following command to remove all
       existing CuPy installations:

         $ pip uninstall <package_name>

      If you previously installed CuPy via conda, also run the following:

         $ conda uninstall cupy

    2. Install the appropriate CuPy package.
       Refer to the Installation Guide for detailed instructions.

         https://docs.cupy.dev/en/stable/install.html

--------------------------------------------------------------------------------

  warnings.warn(f'''
[05:15:36] /opt/dgl/src/runtime/tensordispatch.cc:43: TensorDispatcher: dlopen failed: /hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/dgl/tensoradapter/pytorch/libtensoradapter_pytorch_1.10.2.so: cannot open shared object file: No such file or directory
Using backend: pytorch





 Loading data ... 



training set shape (80000, 6796) 
sum 8401300

target set shape (80000, 6796) 
sum 5574226

TraTen and TrvTen shape:
 torch.Size([80000, 6796]) torch.Size([80000, 6796])




 The Network ... 






 The graph ... 



edge_index
 tensor([[   0,    1,    2,  ..., 4907, 4907, 4907],
        [   1,    2,    3,  ..., 4918, 4919, 4920]]) 

edge_index shape
 torch.Size([2, 36593])
graph: Graph(num_nodes=6796, num_edges=36593,
      ndata_schemes={}
      edata_schemes={}) 
nodes: tensor([   0,    1,    2,  ..., 6793, 6794, 6795], device='cuda:0') 
nodes shape: torch.Size([6796]) 
edges: (tensor([   0,    1,    2,  ..., 4907, 4907, 4907], device='cuda:0'), tensor([   1,    2,    3,  ..., 4918, 4919, 4920], device='cuda:0')) 
edges shae:

number of nodes: 6796

number of edges: 73186

node features (random input): tensor([[ 2.3307],
        [ 0.0686],
        [-0.5189],
        ...,
        [ 1.0077],
        [-0.2599],
        [ 0.2449]], device='cuda:0', requires_grad=True) 
node features sum: tensor(0.0569, device='cuda:0', grad_fn=<SumBackward0>)

edges features: tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
edges features sum: tensor(73186., device='cuda:0', grad_fn=<SumBackward0>)

example: 
Out degrees of node 234: 14

In degrees of node 234: 14
Model name: DGLBhaGcnReNewestweight7N4

net GCN(
  (conv1): GraphConv(in=1, out=256, normalization=both, activation=None)
  (conv2): GraphConv(in=256, out=128, normalization=both, activation=None)
  (conv3): GraphConv(in=128, out=64, normalization=both, activation=None)
  (conv4): GraphConv(in=64, out=32, normalization=both, activation=None)
  (conv5): GraphConv(in=32, out=1, normalization=both, activation=None)
) 
number of the free learnable parameters: 43777

parameters of the network:

name conv1.weight 
shape:
 torch.Size([1, 256]) 
grad:
 True 
date:
 tensor([[ 0.1342, -0.1402, -0.0960, -0.1518,  0.1097, -0.0138, -0.0038,  0.1164,
         -0.0491, -0.1163, -0.0150, -0.1495,  0.0135,  0.0299, -0.0503,  0.0375,
         -0.0283,  0.0866, -0.1017, -0.0996,  0.1361, -0.1029, -0.0642, -0.1070,
         -0.0573, -0.0368, -0.0827, -0.1115,  0.0720, -0.0968, -0.1133,  0.0133,
          0.1325,  0.1158, -0.0547,  0.0874,  0.0501, -0.1178, -0.1150,  0.1301,
          0.0768, -0.0028, -0.0821,  0.0271, -0.1001, -0.0227, -0.1041, -0.1330,
         -0.1231,  0.0482,  0.0604,  0.0901,  0.0564, -0.1070, -0.0988, -0.1392,
         -0.0283,  0.0745, -0.0516,  0.1331, -0.1336,  0.0073, -0.1487,  0.0828,
         -0.0261,  0.1161, -0.0781,  0.1139,  0.0666, -0.0472,  0.1217, -0.0325,
         -0.0898, -0.1016, -0.1018, -0.0600,  0.0616, -0.1473, -0.1193,  0.1455,
          0.0890, -0.1254,  0.0468,  0.0890,  0.0638, -0.1510,  0.0531,  0.0601,
          0.1350, -0.1383,  0.0469,  0.0783,  0.0896, -0.0212,  0.1091,  0.1460,
         -0.0450,  0.0611, -0.0770,  0.1356, -0.0755, -0.0806, -0.1188,  0.1360,
         -0.0591, -0.0030, -0.0618, -0.0994, -0.0823,  0.1026, -0.0804,  0.0474,
         -0.0502,  0.0853, -0.0274,  0.0303,  0.1307, -0.0991,  0.0933,  0.0756,
          0.0372, -0.0208,  0.1432, -0.1360, -0.1040, -0.1127,  0.0336, -0.0553,
         -0.0019,  0.1428, -0.1010, -0.1068,  0.0187, -0.1369,  0.0049,  0.1506,
         -0.0506, -0.0970,  0.0715,  0.1039,  0.1356,  0.0884,  0.1018, -0.0995,
          0.0397,  0.0750, -0.0316,  0.0382,  0.0062,  0.0702,  0.1524, -0.1109,
         -0.0077, -0.1176,  0.1470, -0.0044, -0.0208, -0.1492, -0.0850, -0.1344,
         -0.0308, -0.0382,  0.0159,  0.0280,  0.0272, -0.1500, -0.0814,  0.0403,
          0.0365, -0.1510, -0.0538, -0.1033, -0.1518,  0.0795, -0.1013,  0.0304,
         -0.1466, -0.0383,  0.0786, -0.0697, -0.0137,  0.0002, -0.0245,  0.0241,
          0.0243, -0.0731,  0.1382,  0.1160, -0.0766,  0.0003,  0.0795, -0.0050,
          0.1186,  0.1344,  0.0967,  0.0270,  0.0649,  0.1340,  0.0679, -0.0659,
         -0.0753, -0.0880,  0.0453, -0.0886,  0.0011,  0.1515,  0.0447, -0.0508,
         -0.0415,  0.1199, -0.0960, -0.0034,  0.0882,  0.1277, -0.0239,  0.0529,
          0.0797,  0.0609, -0.0097,  0.0251, -0.0327, -0.0078, -0.0250,  0.0750,
          0.0447,  0.0606, -0.1498,  0.0515, -0.0232,  0.0844, -0.1393, -0.0994,
         -0.1276, -0.0753,  0.0840, -0.0275, -0.0606,  0.0356, -0.0612, -0.0577,
         -0.0908, -0.0992, -0.1463,  0.0637,  0.0826,  0.1231, -0.1099,  0.0618,
         -0.0977,  0.1257, -0.1051,  0.0676,  0.1293,  0.1390, -0.0922, -0.0367]],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([[ 0.1342, -0.1402, -0.0960, -0.1518,  0.1097, -0.0138, -0.0038,  0.1164,
         -0.0491, -0.1163, -0.0150, -0.1495,  0.0135,  0.0299, -0.0503,  0.0375,
         -0.0283,  0.0866, -0.1017, -0.0996,  0.1361, -0.1029, -0.0642, -0.1070,
         -0.0573, -0.0368, -0.0827, -0.1115,  0.0720, -0.0968, -0.1133,  0.0133,
          0.1325,  0.1158, -0.0547,  0.0874,  0.0501, -0.1178, -0.1150,  0.1301,
          0.0768, -0.0028, -0.0821,  0.0271, -0.1001, -0.0227, -0.1041, -0.1330,
         -0.1231,  0.0482,  0.0604,  0.0901,  0.0564, -0.1070, -0.0988, -0.1392,
         -0.0283,  0.0745, -0.0516,  0.1331, -0.1336,  0.0073, -0.1487,  0.0828,
         -0.0261,  0.1161, -0.0781,  0.1139,  0.0666, -0.0472,  0.1217, -0.0325,
         -0.0898, -0.1016, -0.1018, -0.0600,  0.0616, -0.1473, -0.1193,  0.1455,
          0.0890, -0.1254,  0.0468,  0.0890,  0.0638, -0.1510,  0.0531,  0.0601,
          0.1350, -0.1383,  0.0469,  0.0783,  0.0896, -0.0212,  0.1091,  0.1460,
         -0.0450,  0.0611, -0.0770,  0.1356, -0.0755, -0.0806, -0.1188,  0.1360,
         -0.0591, -0.0030, -0.0618, -0.0994, -0.0823,  0.1026, -0.0804,  0.0474,
         -0.0502,  0.0853, -0.0274,  0.0303,  0.1307, -0.0991,  0.0933,  0.0756,
          0.0372, -0.0208,  0.1432, -0.1360, -0.1040, -0.1127,  0.0336, -0.0553,
         -0.0019,  0.1428, -0.1010, -0.1068,  0.0187, -0.1369,  0.0049,  0.1506,
         -0.0506, -0.0970,  0.0715,  0.1039,  0.1356,  0.0884,  0.1018, -0.0995,
          0.0397,  0.0750, -0.0316,  0.0382,  0.0062,  0.0702,  0.1524, -0.1109,
         -0.0077, -0.1176,  0.1470, -0.0044, -0.0208, -0.1492, -0.0850, -0.1344,
         -0.0308, -0.0382,  0.0159,  0.0280,  0.0272, -0.1500, -0.0814,  0.0403,
          0.0365, -0.1510, -0.0538, -0.1033, -0.1518,  0.0795, -0.1013,  0.0304,
         -0.1466, -0.0383,  0.0786, -0.0697, -0.0137,  0.0002, -0.0245,  0.0241,
          0.0243, -0.0731,  0.1382,  0.1160, -0.0766,  0.0003,  0.0795, -0.0050,
          0.1186,  0.1344,  0.0967,  0.0270,  0.0649,  0.1340,  0.0679, -0.0659,
         -0.0753, -0.0880,  0.0453, -0.0886,  0.0011,  0.1515,  0.0447, -0.0508,
         -0.0415,  0.1199, -0.0960, -0.0034,  0.0882,  0.1277, -0.0239,  0.0529,
          0.0797,  0.0609, -0.0097,  0.0251, -0.0327, -0.0078, -0.0250,  0.0750,
          0.0447,  0.0606, -0.1498,  0.0515, -0.0232,  0.0844, -0.1393, -0.0994,
         -0.1276, -0.0753,  0.0840, -0.0275, -0.0606,  0.0356, -0.0612, -0.0577,
         -0.0908, -0.0992, -0.1463,  0.0637,  0.0826,  0.1231, -0.1099,  0.0618,
         -0.0977,  0.1257, -0.1051,  0.0676,  0.1293,  0.1390, -0.0922, -0.0367]],
       device='cuda:0', requires_grad=True)

name conv1.bias 
shape:
 torch.Size([256]) 
grad:
 True 
date:
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)

name conv2.weight 
shape:
 torch.Size([256, 128]) 
grad:
 True 
date:
 tensor([[-0.0151, -0.0921, -0.0416,  ...,  0.0709, -0.1049,  0.0609],
        [-0.0335, -0.1030,  0.1088,  ...,  0.0778,  0.0057, -0.0152],
        [-0.1018,  0.0427, -0.0860,  ..., -0.1109, -0.1168, -0.0455],
        ...,
        [ 0.0577,  0.0144, -0.0436,  ...,  0.0570, -0.0878,  0.0925],
        [ 0.0777,  0.0454, -0.0085,  ..., -0.0562,  0.0089,  0.0236],
        [ 0.0515,  0.0453, -0.0872,  ...,  0.0323, -0.0057,  0.0631]],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([[-0.0151, -0.0921, -0.0416,  ...,  0.0709, -0.1049,  0.0609],
        [-0.0335, -0.1030,  0.1088,  ...,  0.0778,  0.0057, -0.0152],
        [-0.1018,  0.0427, -0.0860,  ..., -0.1109, -0.1168, -0.0455],
        ...,
        [ 0.0577,  0.0144, -0.0436,  ...,  0.0570, -0.0878,  0.0925],
        [ 0.0777,  0.0454, -0.0085,  ..., -0.0562,  0.0089,  0.0236],
        [ 0.0515,  0.0453, -0.0872,  ...,  0.0323, -0.0057,  0.0631]],
       device='cuda:0', requires_grad=True)

name conv2.bias 
shape:
 torch.Size([128]) 
grad:
 True 
date:
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
parameter:
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)

name conv3.weight 
shape:
 torch.Size([128, 64]) 
grad:
 True 
date:
 tensor([[ 0.1688,  0.0911,  0.0073,  ...,  0.0219,  0.0296, -0.0721],
        [ 0.1384, -0.1205,  0.0052,  ...,  0.0856, -0.1286,  0.0808],
        [-0.1020,  0.1693, -0.1645,  ...,  0.0572, -0.0291,  0.1155],
        ...,
        [ 0.1681,  0.1409, -0.1748,  ..., -0.0854, -0.0651,  0.0846],
        [ 0.0047,  0.0300, -0.0132,  ..., -0.1623,  0.1164, -0.0865],
        [ 0.1071,  0.1049, -0.1604,  ...,  0.0764, -0.0430, -0.1542]],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([[ 0.1688,  0.0911,  0.0073,  ...,  0.0219,  0.0296, -0.0721],
        [ 0.1384, -0.1205,  0.0052,  ...,  0.0856, -0.1286,  0.0808],
        [-0.1020,  0.1693, -0.1645,  ...,  0.0572, -0.0291,  0.1155],
        ...,
        [ 0.1681,  0.1409, -0.1748,  ..., -0.0854, -0.0651,  0.0846],
        [ 0.0047,  0.0300, -0.0132,  ..., -0.1623,  0.1164, -0.0865],
        [ 0.1071,  0.1049, -0.1604,  ...,  0.0764, -0.0430, -0.1542]],
       device='cuda:0', requires_grad=True)

name conv3.bias 
shape:
 torch.Size([64]) 
grad:
 True 
date:
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)

name conv4.weight 
shape:
 torch.Size([64, 32]) 
grad:
 True 
date:
 tensor([[-0.0945, -0.1948, -0.0296,  ..., -0.1653, -0.0094, -0.0573],
        [ 0.0482,  0.1024,  0.0677,  ..., -0.0114,  0.0266, -0.2381],
        [-0.2161, -0.2036,  0.2312,  ..., -0.0581,  0.1636, -0.2100],
        ...,
        [-0.1261, -0.0866, -0.1652,  ...,  0.1863, -0.0814,  0.1549],
        [ 0.0509,  0.0517,  0.1319,  ...,  0.1988,  0.0946,  0.2373],
        [ 0.1724,  0.2318, -0.2473,  ..., -0.2046,  0.0495,  0.2489]],
       device='cuda:0') 
parameter:
 Parameter containing:
tensor([[-0.0945, -0.1948, -0.0296,  ..., -0.1653, -0.0094, -0.0573],
        [ 0.0482,  0.1024,  0.0677,  ..., -0.0114,  0.0266, -0.2381],
        [-0.2161, -0.2036,  0.2312,  ..., -0.0581,  0.1636, -0.2100],
        ...,
        [-0.1261, -0.0866, -0.1652,  ...,  0.1863, -0.0814,  0.1549],
        [ 0.0509,  0.0517,  0.1319,  ...,  0.1988,  0.0946,  0.2373],
        [ 0.1724,  0.2318, -0.2473,  ..., -0.2046,  0.0495,  0.2489]],
       device='cuda:0', requires_grad=True)

name conv4.bias 
shape:
 torch.Size([32]) 
grad:
 True 
date:
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
parameter:
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)

name conv5.weight 
shape:
 torch.Size([32, 1]) 
grad:
 True 
date:
 tensor([[-0.1412],
        [ 0.3904],
        [-0.2884],
        [-0.1416],
        [-0.2914],
        [ 0.1488],
        [-0.2218],
        [-0.1239],
        [-0.2373],
        [ 0.1687],
        [ 0.1192],
        [ 0.3738],
        [ 0.0300],
        [-0.4188],
        [ 0.0042],
        [-0.1952],
        [ 0.2332],
        [ 0.4165],
        [ 0.3262],
        [-0.0899],
        [-0.1831],
        [ 0.0860],
        [ 0.0446],
        [-0.3436],
        [-0.2602],
        [ 0.3639],
        [-0.2318],
        [-0.1639],
        [ 0.1509],
        [-0.0667],
        [ 0.2062],
        [-0.0481]], device='cuda:0') 
parameter:
 Parameter containing:
tensor([[-0.1412],
        [ 0.3904],
        [-0.2884],
        [-0.1416],
        [-0.2914],
        [ 0.1488],
        [-0.2218],
        [-0.1239],
        [-0.2373],
        [ 0.1687],
        [ 0.1192],
        [ 0.3738],
        [ 0.0300],
        [-0.4188],
        [ 0.0042],
        [-0.1952],
        [ 0.2332],
        [ 0.4165],
        [ 0.3262],
        [-0.0899],
        [-0.1831],
        [ 0.0860],
        [ 0.0446],
        [-0.3436],
        [-0.2602],
        [ 0.3639],
        [-0.2318],
        [-0.1639],
        [ 0.1509],
        [-0.0667],
        [ 0.2062],
        [-0.0481]], device='cuda:0', requires_grad=True)

name conv5.bias 
shape:
 torch.Size([1]) 
grad:
 True 
date:
 tensor([0.], device='cuda:0') 
parameter:
 Parameter containing:
tensor([0.], device='cuda:0', requires_grad=True)



input node feature: 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].shape torch.Size([6796, 1]) 
g.ndata[nfet].sum tensor(82.4738, device='cuda:0')



input graph: 
g Graph(num_nodes=6796, num_edges=73186,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)}) 
g.edata[efet].shape torch.Size([73186, 1]) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
g.edata[efet].sum tensor(73186., device='cuda:0', grad_fn=<SumBackward0>) 
g.ndata[nfet].shape torch.Size([6796, 1]) 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].sum tensor(82.4738, device='cuda:0')
param0_0.shape torch.Size([256])
param.data[:, 0].shape torch.Size([256])



h after the first convolutional layer: 
 tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0',
       grad_fn=<AddBackward0>) 
h.shape torch.Size([6796, 256]) 
h.sum tensor(142.1896, device='cuda:0', grad_fn=<SumBackward0>)



h[:, 0].sum tensor(-11.2340, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[0] tensor(-11.4855, device='cuda:0')



h[100].sum tensor(5.9105, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[100] tensor(6.0428, device='cuda:0')



h[200].sum tensor(3.5972, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[200] tensor(3.6777, device='cuda:0')



h1 after relu, the first updating, and another relu: 
 tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0',
       grad_fn=<ReluBackward0>) 
h.shape torch.Size([6796, 256]) 
h.sum tensor(11008.3271, device='cuda:0', grad_fn=<SumBackward0>)



h2 after the second convolutional layer: 
 tensor([[0.0000e+00, 1.3370e-02, 1.6382e-03,  ..., 7.6819e-03, 7.1245e-04,
         1.1613e-02],
        [0.0000e+00, 6.2646e-03, 7.6747e-04,  ..., 3.5990e-03, 3.3372e-04,
         5.4408e-03],
        [0.0000e+00, 1.7653e-03, 2.1649e-04,  ..., 1.0144e-03, 9.4305e-05,
         1.5331e-03],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         0.0000e+00],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         0.0000e+00],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         0.0000e+00]], device='cuda:0', grad_fn=<ReluBackward0>) 
h2.shape torch.Size([6796, 128]) 
h2.sum tensor(70769.9141, device='cuda:0', grad_fn=<SumBackward0>)



h2[0].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param0_2).sum() + bias0 tensor(-158.3547, device='cuda:0', grad_fn=<AddBackward0>)



h2[100].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param50_2).sum() + bias50 tensor(-49.8752, device='cuda:0', grad_fn=<AddBackward0>)



h2[200].sum tensor(1445.9124, device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param100_2).sum() + bias100 tensor(91.9096, device='cuda:0', grad_fn=<AddBackward0>)



g Graph(num_nodes=6796, num_edges=73186,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)})



 output, 
h5 tensor([[-0.7506],
        [-0.5288],
        [-0.3559],
        ...,
        [ 0.0000],
        [ 0.0000],
        [ 0.0000]], device='cuda:0', grad_fn=<AddBackward0>) 
h5.shape torch.Size([6796, 1]) 
h5.sum tensor(-34731.4453, device='cuda:0', grad_fn=<SumBackward0>) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
g.edata[efet].shape torch.Size([73186, 1]) 
g.edata[efet].sum tensor(73186., device='cuda:0', grad_fn=<SumBackward0>)

Passing event 1007 from the network before training input tensor([0., 0., 0.,  ..., 0., 0., 0.], device='cuda:0') 
result1: tensor([[-0.7506],
        [-0.5288],
        [-0.3559],
        ...,
        [ 0.0000],
        [ 0.0000],
        [ 0.0000]], device='cuda:0', grad_fn=<AddBackward0>) 
result1.shape: torch.Size([6796, 1])



input node feature: 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].shape torch.Size([135920, 1]) 
g.ndata[nfet].sum tensor(989.0452, device='cuda:0')



input graph: 
g Graph(num_nodes=135920, num_edges=1463720,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)}) 
g.edata[efet].shape torch.Size([1463720, 1]) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', grad_fn=<CatBackward0>) 
g.edata[efet].sum tensor(1463720., device='cuda:0', grad_fn=<SumBackward0>) 
g.ndata[nfet].shape torch.Size([135920, 1]) 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].sum tensor(989.0452, device='cuda:0')
param0_0.shape torch.Size([256])
param.data[:, 0].shape torch.Size([256])



h after the first convolutional layer: 
 tensor([[-0.0036,  0.0066,  0.0223,  ..., -0.0054,  0.0107, -0.0010],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        ...,
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000]],
       device='cuda:0', grad_fn=<AddBackward0>) 
h.shape torch.Size([135920, 256]) 
h.sum tensor(1349.1001, device='cuda:0', grad_fn=<SumBackward0>)



h[:, 0].sum tensor(-23.3997, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[0] tensor(-23.9872, device='cuda:0')



h[100].sum tensor(105.2351, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[100] tensor(107.8769, device='cuda:0')



h[200].sum tensor(-2.1960, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[200] tensor(-2.2512, device='cuda:0')



h1 after relu, the first updating, and another relu: 
 tensor([[0.0000, 0.0249, 0.0843,  ..., 0.0000, 0.0406, 0.0000],
        [0.0000, 0.0205, 0.0694,  ..., 0.0000, 0.0334, 0.0000],
        [0.0000, 0.0048, 0.0162,  ..., 0.0000, 0.0078, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0', grad_fn=<ReluBackward0>) 
h.shape torch.Size([135920, 256]) 
h.sum tensor(113409.4688, device='cuda:0', grad_fn=<SumBackward0>)



h2 after the second convolutional layer: 
 tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0',
       grad_fn=<ReluBackward0>) 
h2.shape torch.Size([135920, 128]) 
h2.sum tensor(519502.7812, device='cuda:0', grad_fn=<SumBackward0>)



h2[0].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param0_2).sum() + bias0 tensor(-1739.6421, device='cuda:0', grad_fn=<AddBackward0>)



h2[100].sum tensor(3191.7388, device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param50_2).sum() + bias50 tensor(223.6266, device='cuda:0', grad_fn=<AddBackward0>)



h2[200].sum tensor(9179.2363, device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param100_2).sum() + bias100 tensor(642.9695, device='cuda:0', grad_fn=<AddBackward0>)



g Graph(num_nodes=135920, num_edges=1463720,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)})



 output, 
h5 tensor([[-9.1092e-01],
        [-9.8560e-01],
        [-1.0876e+00],
        ...,
        [-1.1859e-05],
        [-1.9720e-05],
        [-2.8192e-05]], device='cuda:0', grad_fn=<AddBackward0>) 
h5.shape torch.Size([135920, 1]) 
h5.sum tensor(-63233.0703, device='cuda:0', grad_fn=<SumBackward0>) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', grad_fn=<CatBackward0>) 
g.edata[efet].shape torch.Size([1463720, 1]) 
g.edata[efet].sum tensor(1463720., device='cuda:0', grad_fn=<SumBackward0>)

Passing two random events from the network before training 
result1: tensor([[-0.7506],
        [-0.5288],
        [-0.3559],
        ...,
        [ 0.0000],
        [ 0.0000],
        [ 0.0000]], device='cuda:0', grad_fn=<AddBackward0>) 
result1.shape: torch.Size([6796, 1]) 
input: tensor([0., 0., 0.,  ..., 0., 0., 0.], device='cuda:0')
Traceback (most recent call last):
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLBhaGcnReNewestweight7N4/./Results.py", line 21, in <module>
    net = GCN(1, 1).to('device')
  File "/hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/torch/nn/modules/module.py", line 880, in to
    device, dtype, non_blocking, convert_to_format = torch._C._nn._parse_to(*args, **kwargs)
RuntimeError: Expected one of cpu, cuda, xpu, mkldnn, opengl, opencl, ideep, hip, ve, ort, mlc, xla, lazy, vulkan, meta, hpu device type at start of device string: device

real	1m21.535s
user	0m19.514s
sys	0m11.429s
