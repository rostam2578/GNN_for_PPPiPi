0: gpu019.ihep.ac.cn
GPU 0: Tesla V100-SXM2-32GB (UUID: GPU-69b817fd-44f4-09f0-151a-848e9aa01c8f)
GPU 1: Tesla V100-SXM2-32GB (UUID: GPU-5b7c256d-b33e-669f-0cd1-b5800c0c0535)
GPU 2: Tesla V100-SXM2-32GB (UUID: GPU-53e525bc-204a-d650-28f6-9b7bcfddc591)
Allocate GPU cards : 0,1,2

modinfo:
filename:       /lib/modules/3.10.0-1127.8.2.el7.x86_64/extra/nvidia.ko.xz
alias:          char-major-195-*
version:        450.36.06
supported:      external
license:        NVIDIA
retpoline:      Y
rhelversion:    7.8
srcversion:     BB5CB243542347D4EB0C79C
alias:          pci:v000010DEd*sv*sd*bc03sc02i00*
alias:          pci:v000010DEd*sv*sd*bc03sc00i00*
depends:        
vermagic:       3.10.0-1127.8.2.el7.x86_64 SMP mod_unload modversions 
parm:           NvSwitchRegDwords:NvSwitch regkey (charp)
parm:           NvSwitchBlacklist:NvSwitchBlacklist=uuid[,uuid...] (charp)
parm:           NVreg_ResmanDebugLevel:int
parm:           NVreg_RmLogonRC:int
parm:           NVreg_ModifyDeviceFiles:int
parm:           NVreg_DeviceFileUID:int
parm:           NVreg_DeviceFileGID:int
parm:           NVreg_DeviceFileMode:int
parm:           NVreg_InitializeSystemMemoryAllocations:int
parm:           NVreg_UsePageAttributeTable:int
parm:           NVreg_MapRegistersEarly:int
parm:           NVreg_RegisterForACPIEvents:int
parm:           NVreg_EnablePCIeGen3:int
parm:           NVreg_EnableMSI:int
parm:           NVreg_TCEBypassMode:int
parm:           NVreg_EnableStreamMemOPs:int
parm:           NVreg_EnableBacklightHandler:int
parm:           NVreg_RestrictProfilingToAdminUsers:int
parm:           NVreg_PreserveVideoMemoryAllocations:int
parm:           NVreg_DynamicPowerManagement:int
parm:           NVreg_DynamicPowerManagementVideoMemoryThreshold:int
parm:           NVreg_EnableUserNUMAManagement:int
parm:           NVreg_MemoryPoolSize:int
parm:           NVreg_KMallocHeapMaxSize:int
parm:           NVreg_VMallocHeapMaxSize:int
parm:           NVreg_IgnoreMMIOCheck:int
parm:           NVreg_NvLinkDisable:int
parm:           NVreg_EnablePCIERelaxedOrderingMode:int
parm:           NVreg_RegisterPCIDriver:int
parm:           NVreg_RegistryDwords:charp
parm:           NVreg_RegistryDwordsPerDevice:charp
parm:           NVreg_RmMsg:charp
parm:           NVreg_GpuBlacklist:charp
parm:           NVreg_TemporaryFilePath:charp
parm:           NVreg_AssignGpus:charp

nvidia-smi:
Tue Aug  9 16:37:01 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 450.36.06    Driver Version: 450.36.06    CUDA Version: 11.0     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Tesla V100-SXM2...  On   | 00000000:1F:00.0 Off |                    0 |
| N/A   36C    P0    45W / 300W |      0MiB / 32510MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   1  Tesla V100-SXM2...  On   | 00000000:B4:00.0 Off |                    0 |
| N/A   35C    P0    43W / 300W |      0MiB / 32510MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   2  Tesla V100-SXM2...  On   | 00000000:B6:00.0 Off |                    0 |
| N/A   39C    P0    65W / 300W |      0MiB / 32510MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+

nvcc --version:
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2021 NVIDIA Corporation
Built on Sun_Mar_21_19:15:46_PDT_2021
Cuda compilation tools, release 11.3, V11.3.58
Build cuda_11.3.r11.3/compiler.29745058_0

 torch version: 1.10.2

 cuda version: 11.3

 is cuda available: True

 CUDNN VERSION: 8200

 Number CUDA Devices: 3

 CUDA Device Name: Tesla V100-SXM2-32GB

 CUDA Device Total Memory [GB]: 34.089730048

 Device capability: (7, 0) 

 Cuda deviice: <torch.cuda.device object at 0x2b977b721a00> 

 Is cuda initialized: True

 CUDA_HOME: /hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1

real	0m4.580s
user	0m2.231s
sys	0m1.573s
[16:37:06] /opt/dgl/src/runtime/tensordispatch.cc:43: TensorDispatcher: dlopen failed: /hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/dgl/tensoradapter/pytorch/libtensoradapter_pytorch_1.10.2.so: cannot open shared object file: No such file or directory
Using backend: pytorch
/hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/cupy/_environment.py:438: UserWarning: 
--------------------------------------------------------------------------------

  CuPy may not function correctly because multiple CuPy packages are installed
  in your environment:

    cupy, cupy-cuda110

  Follow these steps to resolve this issue:

    1. For all packages listed above, run the following command to remove all
       existing CuPy installations:

         $ pip uninstall <package_name>

      If you previously installed CuPy via conda, also run the following:

         $ conda uninstall cupy

    2. Install the appropriate CuPy package.
       Refer to the Installation Guide for detailed instructions.

         https://docs.cupy.dev/en/stable/install.html

--------------------------------------------------------------------------------

  warnings.warn(f'''




 Training ... 






 The Network ... 






 The graph ... 



edge_index
 tensor([[   0,    1,    2,  ..., 4907, 4907, 4907],
        [   1,    2,    3,  ..., 4918, 4919, 4920]]) 

edge_index shape
 torch.Size([2, 36593])
graph: Graph(num_nodes=6796, num_edges=36593,
      ndata_schemes={}
      edata_schemes={}) 
nodes: tensor([   0,    1,    2,  ..., 6793, 6794, 6795], device='cuda:0') 
nodes shape: torch.Size([6796]) 
edges: (tensor([   0,    1,    2,  ..., 4907, 4907, 4907], device='cuda:0'), tensor([   1,    2,    3,  ..., 4918, 4919, 4920], device='cuda:0')) 
edges shae:

number of nodes: 6796

number of edges: 73186

node features (random input): tensor([[-1.2045],
        [-0.5368],
        [ 0.0261],
        ...,
        [ 0.8413],
        [-0.6273],
        [ 0.5285]], device='cuda:0', requires_grad=True) 
node features sum: tensor(7.1709, device='cuda:0', grad_fn=<SumBackward0>)

edges features: tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
edges features sum: tensor(73186., device='cuda:0', grad_fn=<SumBackward0>)

example: 
Out degrees of node 234: 14

In degrees of node 234: 14





 Loading data ... 


shape (80000, 6796) (80000, 6796)
sum 5574226 8401300
shape torch.Size([80000, 6796]) torch.Size([80000, 6796])
Model name: DGLpppipiGcnReNewestweight7N2
net GCN(
  (conv1): GraphConv(in=1, out=256, normalization=both, activation=None)
  (conv2): GraphConv(in=256, out=128, normalization=both, activation=None)
  (conv3): GraphConv(in=128, out=64, normalization=both, activation=None)
  (conv4): GraphConv(in=64, out=32, normalization=both, activation=None)
  (conv5): GraphConv(in=32, out=1, normalization=both, activation=None)
)
conv1.weight 
 torch.Size([1, 256]) 
 True 
 tensor([[ 0.0576,  0.0393, -0.0930, -0.1076, -0.0385,  0.0743, -0.0406,  0.1233,
          0.0279,  0.0047,  0.0172,  0.1336, -0.1499, -0.1388, -0.0232,  0.0167,
          0.0665, -0.1473, -0.0698, -0.0505,  0.0341, -0.0143,  0.1175,  0.0936,
          0.0521,  0.1379,  0.0942,  0.0081,  0.0122, -0.0166, -0.1508, -0.0275,
         -0.0842, -0.0586, -0.0488, -0.0543, -0.0892,  0.1133,  0.0685, -0.1381,
          0.1198, -0.1104, -0.0391,  0.0343, -0.1205,  0.0887,  0.0915, -0.0210,
         -0.0618,  0.0394, -0.0018, -0.1435,  0.0359,  0.0629, -0.0768, -0.0102,
          0.0283,  0.0957, -0.0039,  0.1005, -0.1396,  0.0865,  0.1101, -0.0102,
          0.1381, -0.1516,  0.0769, -0.1331, -0.0453, -0.1024,  0.0327, -0.0187,
         -0.0976, -0.1156,  0.0976,  0.0538, -0.0231, -0.1053, -0.0047, -0.1055,
          0.0790, -0.0686, -0.0935,  0.1146, -0.1356,  0.0995, -0.0967, -0.0474,
         -0.0096,  0.1435, -0.0403, -0.0778, -0.0780,  0.0150, -0.0052, -0.0782,
         -0.1408,  0.0075, -0.0957, -0.1092, -0.0015, -0.0980,  0.1142, -0.0925,
         -0.0266,  0.0687,  0.0074,  0.1472,  0.1362, -0.1472,  0.0563,  0.0674,
          0.0644,  0.0315, -0.1285, -0.0142, -0.1181,  0.0110,  0.0370,  0.0528,
          0.0730, -0.1183, -0.0457, -0.0824, -0.0995, -0.1041,  0.1145, -0.0670,
          0.0925, -0.0780,  0.0728,  0.1065, -0.1378,  0.0763, -0.1288, -0.0460,
          0.0684, -0.0330,  0.0537, -0.0243,  0.0251,  0.0301,  0.1512,  0.0066,
          0.0622,  0.1407, -0.0308, -0.1212, -0.0722,  0.0517,  0.1293,  0.0614,
          0.0778,  0.1214, -0.0594, -0.0472,  0.0910, -0.0423, -0.0553,  0.0367,
          0.1337, -0.1466, -0.0244, -0.0073,  0.1353,  0.1241,  0.0357, -0.1139,
         -0.0482, -0.0307,  0.0890,  0.0381, -0.0256,  0.1293, -0.0351, -0.0022,
         -0.0173, -0.0397, -0.0268, -0.0639,  0.0563, -0.0374, -0.1364,  0.1022,
          0.0481,  0.0010,  0.0812, -0.1304, -0.0110,  0.0713,  0.0729,  0.1102,
          0.0752, -0.1430, -0.0707,  0.0345, -0.0927,  0.0941,  0.1462, -0.0311,
          0.0312, -0.0823,  0.0785,  0.0789, -0.0506,  0.1126, -0.1259,  0.1079,
          0.0980,  0.0359, -0.0861,  0.1076, -0.0900,  0.0900,  0.1512, -0.0672,
          0.0619, -0.0805,  0.0170,  0.1373,  0.1028,  0.1313,  0.0147, -0.1365,
         -0.0344,  0.1417,  0.1518,  0.0993, -0.0760,  0.0100, -0.0433, -0.1403,
          0.0460,  0.1501, -0.0461, -0.0693, -0.0379, -0.0313,  0.0576,  0.0863,
          0.0157, -0.0483, -0.1415, -0.0594, -0.1458,  0.1216, -0.1136, -0.1385,
          0.0737,  0.1102, -0.0970, -0.0448, -0.0314,  0.0054, -0.0380,  0.0808]],
       device='cuda:0') 
 Parameter containing:
tensor([[ 0.0576,  0.0393, -0.0930, -0.1076, -0.0385,  0.0743, -0.0406,  0.1233,
          0.0279,  0.0047,  0.0172,  0.1336, -0.1499, -0.1388, -0.0232,  0.0167,
          0.0665, -0.1473, -0.0698, -0.0505,  0.0341, -0.0143,  0.1175,  0.0936,
          0.0521,  0.1379,  0.0942,  0.0081,  0.0122, -0.0166, -0.1508, -0.0275,
         -0.0842, -0.0586, -0.0488, -0.0543, -0.0892,  0.1133,  0.0685, -0.1381,
          0.1198, -0.1104, -0.0391,  0.0343, -0.1205,  0.0887,  0.0915, -0.0210,
         -0.0618,  0.0394, -0.0018, -0.1435,  0.0359,  0.0629, -0.0768, -0.0102,
          0.0283,  0.0957, -0.0039,  0.1005, -0.1396,  0.0865,  0.1101, -0.0102,
          0.1381, -0.1516,  0.0769, -0.1331, -0.0453, -0.1024,  0.0327, -0.0187,
         -0.0976, -0.1156,  0.0976,  0.0538, -0.0231, -0.1053, -0.0047, -0.1055,
          0.0790, -0.0686, -0.0935,  0.1146, -0.1356,  0.0995, -0.0967, -0.0474,
         -0.0096,  0.1435, -0.0403, -0.0778, -0.0780,  0.0150, -0.0052, -0.0782,
         -0.1408,  0.0075, -0.0957, -0.1092, -0.0015, -0.0980,  0.1142, -0.0925,
         -0.0266,  0.0687,  0.0074,  0.1472,  0.1362, -0.1472,  0.0563,  0.0674,
          0.0644,  0.0315, -0.1285, -0.0142, -0.1181,  0.0110,  0.0370,  0.0528,
          0.0730, -0.1183, -0.0457, -0.0824, -0.0995, -0.1041,  0.1145, -0.0670,
          0.0925, -0.0780,  0.0728,  0.1065, -0.1378,  0.0763, -0.1288, -0.0460,
          0.0684, -0.0330,  0.0537, -0.0243,  0.0251,  0.0301,  0.1512,  0.0066,
          0.0622,  0.1407, -0.0308, -0.1212, -0.0722,  0.0517,  0.1293,  0.0614,
          0.0778,  0.1214, -0.0594, -0.0472,  0.0910, -0.0423, -0.0553,  0.0367,
          0.1337, -0.1466, -0.0244, -0.0073,  0.1353,  0.1241,  0.0357, -0.1139,
         -0.0482, -0.0307,  0.0890,  0.0381, -0.0256,  0.1293, -0.0351, -0.0022,
         -0.0173, -0.0397, -0.0268, -0.0639,  0.0563, -0.0374, -0.1364,  0.1022,
          0.0481,  0.0010,  0.0812, -0.1304, -0.0110,  0.0713,  0.0729,  0.1102,
          0.0752, -0.1430, -0.0707,  0.0345, -0.0927,  0.0941,  0.1462, -0.0311,
          0.0312, -0.0823,  0.0785,  0.0789, -0.0506,  0.1126, -0.1259,  0.1079,
          0.0980,  0.0359, -0.0861,  0.1076, -0.0900,  0.0900,  0.1512, -0.0672,
          0.0619, -0.0805,  0.0170,  0.1373,  0.1028,  0.1313,  0.0147, -0.1365,
         -0.0344,  0.1417,  0.1518,  0.0993, -0.0760,  0.0100, -0.0433, -0.1403,
          0.0460,  0.1501, -0.0461, -0.0693, -0.0379, -0.0313,  0.0576,  0.0863,
          0.0157, -0.0483, -0.1415, -0.0594, -0.1458,  0.1216, -0.1136, -0.1385,
          0.0737,  0.1102, -0.0970, -0.0448, -0.0314,  0.0054, -0.0380,  0.0808]],
       device='cuda:0', requires_grad=True)
conv1.bias 
 torch.Size([256]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
conv2.weight 
 torch.Size([256, 128]) 
 True 
 tensor([[-0.1032,  0.0064,  0.1033,  ..., -0.0032, -0.0482,  0.0102],
        [ 0.0387, -0.0981,  0.0363,  ..., -0.0108,  0.0802,  0.0273],
        [ 0.0454, -0.0368, -0.0102,  ..., -0.1107,  0.0578, -0.0784],
        ...,
        [ 0.0312,  0.0089,  0.0494,  ...,  0.0374,  0.1125, -0.0183],
        [-0.1239, -0.0078,  0.1024,  ...,  0.0376, -0.0240,  0.0843],
        [-0.0482, -0.0239, -0.0355,  ...,  0.0313,  0.0777, -0.0178]],
       device='cuda:0') 
 Parameter containing:
tensor([[-0.1032,  0.0064,  0.1033,  ..., -0.0032, -0.0482,  0.0102],
        [ 0.0387, -0.0981,  0.0363,  ..., -0.0108,  0.0802,  0.0273],
        [ 0.0454, -0.0368, -0.0102,  ..., -0.1107,  0.0578, -0.0784],
        ...,
        [ 0.0312,  0.0089,  0.0494,  ...,  0.0374,  0.1125, -0.0183],
        [-0.1239, -0.0078,  0.1024,  ...,  0.0376, -0.0240,  0.0843],
        [-0.0482, -0.0239, -0.0355,  ...,  0.0313,  0.0777, -0.0178]],
       device='cuda:0', requires_grad=True)
conv2.bias 
 torch.Size([128]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)
conv3.weight 
 torch.Size([128, 64]) 
 True 
 tensor([[ 0.1322,  0.1293,  0.1277,  ...,  0.0495,  0.0201, -0.1201],
        [-0.1544, -0.1310, -0.1021,  ...,  0.1757, -0.1731, -0.1022],
        [-0.0550, -0.1104,  0.0176,  ..., -0.1156,  0.0351, -0.0586],
        ...,
        [ 0.1071, -0.0545, -0.0816,  ...,  0.0684,  0.0365, -0.0263],
        [-0.1233,  0.0962,  0.1029,  ...,  0.0573,  0.0597, -0.1114],
        [ 0.1494,  0.0625, -0.0398,  ...,  0.0789, -0.0442, -0.1724]],
       device='cuda:0') 
 Parameter containing:
tensor([[ 0.1322,  0.1293,  0.1277,  ...,  0.0495,  0.0201, -0.1201],
        [-0.1544, -0.1310, -0.1021,  ...,  0.1757, -0.1731, -0.1022],
        [-0.0550, -0.1104,  0.0176,  ..., -0.1156,  0.0351, -0.0586],
        ...,
        [ 0.1071, -0.0545, -0.0816,  ...,  0.0684,  0.0365, -0.0263],
        [-0.1233,  0.0962,  0.1029,  ...,  0.0573,  0.0597, -0.1114],
        [ 0.1494,  0.0625, -0.0398,  ...,  0.0789, -0.0442, -0.1724]],
       device='cuda:0', requires_grad=True)
conv3.bias 
 torch.Size([64]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
conv4.weight 
 torch.Size([64, 32]) 
 True 
 tensor([[-0.0684,  0.0938,  0.2115,  ..., -0.1916,  0.1502,  0.1044],
        [ 0.0309,  0.1030,  0.2213,  ...,  0.0741, -0.1963, -0.1968],
        [ 0.1195, -0.1854,  0.0424,  ...,  0.1863,  0.1873, -0.0893],
        ...,
        [ 0.1293, -0.1830, -0.1527,  ...,  0.1007, -0.0759,  0.2324],
        [-0.2023, -0.2266,  0.0665,  ..., -0.2220,  0.1636,  0.1815],
        [-0.0530, -0.0931,  0.0584,  ..., -0.1897,  0.0828, -0.1688]],
       device='cuda:0') 
 Parameter containing:
tensor([[-0.0684,  0.0938,  0.2115,  ..., -0.1916,  0.1502,  0.1044],
        [ 0.0309,  0.1030,  0.2213,  ...,  0.0741, -0.1963, -0.1968],
        [ 0.1195, -0.1854,  0.0424,  ...,  0.1863,  0.1873, -0.0893],
        ...,
        [ 0.1293, -0.1830, -0.1527,  ...,  0.1007, -0.0759,  0.2324],
        [-0.2023, -0.2266,  0.0665,  ..., -0.2220,  0.1636,  0.1815],
        [-0.0530, -0.0931,  0.0584,  ..., -0.1897,  0.0828, -0.1688]],
       device='cuda:0', requires_grad=True)
conv4.bias 
 torch.Size([32]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)
conv5.weight 
 torch.Size([32, 1]) 
 True 
 tensor([[ 0.1739],
        [ 0.1033],
        [-0.1135],
        [ 0.1161],
        [ 0.1882],
        [ 0.1148],
        [ 0.0208],
        [ 0.0615],
        [ 0.3053],
        [-0.3152],
        [ 0.4009],
        [ 0.2598],
        [-0.1115],
        [-0.2942],
        [-0.3935],
        [-0.0619],
        [-0.0838],
        [-0.3973],
        [-0.3728],
        [ 0.1304],
        [ 0.2150],
        [-0.0485],
        [ 0.3927],
        [-0.0457],
        [ 0.3645],
        [-0.3072],
        [-0.3115],
        [-0.2584],
        [-0.0754],
        [-0.1524],
        [-0.0174],
        [ 0.3825]], device='cuda:0') 
 Parameter containing:
tensor([[ 0.1739],
        [ 0.1033],
        [-0.1135],
        [ 0.1161],
        [ 0.1882],
        [ 0.1148],
        [ 0.0208],
        [ 0.0615],
        [ 0.3053],
        [-0.3152],
        [ 0.4009],
        [ 0.2598],
        [-0.1115],
        [-0.2942],
        [-0.3935],
        [-0.0619],
        [-0.0838],
        [-0.3973],
        [-0.3728],
        [ 0.1304],
        [ 0.2150],
        [-0.0485],
        [ 0.3927],
        [-0.0457],
        [ 0.3645],
        [-0.3072],
        [-0.3115],
        [-0.2584],
        [-0.0754],
        [-0.1524],
        [-0.0174],
        [ 0.3825]], device='cuda:0', requires_grad=True)
conv5.bias 
 torch.Size([1]) 
 True 
 tensor([0.], device='cuda:0') 
 Parameter containing:
tensor([0.], device='cuda:0', requires_grad=True)
conv1.weight 
 torch.Size([1, 256]) 
 True 
 tensor([[ 0.0392,  0.1323, -0.1527, -0.0138, -0.0615,  0.1008,  0.1065,  0.0994,
         -0.0594, -0.0757,  0.0891,  0.0513,  0.1120, -0.0431, -0.0631, -0.1479,
          0.1457,  0.0585, -0.0097, -0.1382,  0.0431, -0.1288, -0.1094, -0.0829,
          0.1196, -0.1239,  0.0619, -0.0599,  0.0842,  0.0006, -0.0964, -0.0629,
          0.0032, -0.1407,  0.0537,  0.0843, -0.0741, -0.0582, -0.0582,  0.0941,
          0.0800, -0.1369,  0.0636, -0.0990, -0.0548, -0.0738, -0.0058,  0.0799,
          0.0627,  0.0534,  0.1368, -0.0276,  0.0664, -0.0177,  0.1252, -0.0332,
          0.0207, -0.0580, -0.0148,  0.0384, -0.0168,  0.0904, -0.0286, -0.0393,
         -0.0570, -0.0507, -0.0621,  0.1445,  0.0474,  0.0027, -0.0890, -0.1431,
         -0.0503,  0.1061,  0.1235, -0.0311,  0.0332, -0.0185,  0.0730,  0.0990,
         -0.0103,  0.0062,  0.1015,  0.0285, -0.1392,  0.0295, -0.0111,  0.0298,
          0.1234, -0.1424, -0.0513, -0.1154, -0.0964,  0.0334, -0.0886,  0.0573,
         -0.1014,  0.0194, -0.0040,  0.1522,  0.0542,  0.1412,  0.1015, -0.0874,
         -0.0556, -0.0115,  0.0787, -0.1246, -0.1298,  0.1407,  0.0403,  0.1098,
          0.0706, -0.1180, -0.1389,  0.1363, -0.0716, -0.0975, -0.1167, -0.0368,
          0.1098,  0.1251,  0.1288,  0.1076, -0.0888, -0.1478,  0.0172, -0.1498,
          0.0247,  0.1346, -0.0530, -0.0227, -0.1378, -0.0004,  0.0500, -0.1197,
          0.0755,  0.0571,  0.0466, -0.0768, -0.1522,  0.0928, -0.1428, -0.0625,
          0.1276, -0.1344,  0.0453, -0.0973, -0.0497, -0.1294,  0.0919,  0.0278,
         -0.0244, -0.0468, -0.0651,  0.0954,  0.1184,  0.0133, -0.0314,  0.0693,
          0.0125,  0.1036,  0.0301,  0.1197, -0.0121,  0.0617, -0.1215,  0.0176,
          0.1112, -0.1150, -0.0459,  0.0445, -0.1151,  0.0473,  0.1274, -0.0147,
          0.0476,  0.1016,  0.1241, -0.1287, -0.0929, -0.0481, -0.0075, -0.1020,
          0.1423,  0.0493,  0.0824,  0.1337, -0.1007, -0.0897,  0.1091, -0.0338,
         -0.1319, -0.1068,  0.1348, -0.0646,  0.0131,  0.0321,  0.1247, -0.1098,
          0.0006, -0.0241,  0.1159, -0.0460, -0.0408, -0.1315, -0.0616, -0.0137,
         -0.0145, -0.1393, -0.1462,  0.1032,  0.1031,  0.0245,  0.1470, -0.1323,
         -0.0552,  0.0704, -0.1031, -0.0989, -0.0630,  0.0802, -0.1468, -0.1160,
          0.0675, -0.0817, -0.0296, -0.0941, -0.0308,  0.0069,  0.0791, -0.1041,
          0.0229, -0.1396, -0.0862, -0.1455,  0.1266, -0.1126, -0.0689,  0.0854,
          0.0174, -0.0094,  0.0080, -0.1375,  0.0025, -0.1015,  0.1261,  0.0273,
          0.1115, -0.0299, -0.0806,  0.0366,  0.0838,  0.1506,  0.0954,  0.1515]],
       device='cuda:0') 
 Parameter containing:
tensor([[ 0.0392,  0.1323, -0.1527, -0.0138, -0.0615,  0.1008,  0.1065,  0.0994,
         -0.0594, -0.0757,  0.0891,  0.0513,  0.1120, -0.0431, -0.0631, -0.1479,
          0.1457,  0.0585, -0.0097, -0.1382,  0.0431, -0.1288, -0.1094, -0.0829,
          0.1196, -0.1239,  0.0619, -0.0599,  0.0842,  0.0006, -0.0964, -0.0629,
          0.0032, -0.1407,  0.0537,  0.0843, -0.0741, -0.0582, -0.0582,  0.0941,
          0.0800, -0.1369,  0.0636, -0.0990, -0.0548, -0.0738, -0.0058,  0.0799,
          0.0627,  0.0534,  0.1368, -0.0276,  0.0664, -0.0177,  0.1252, -0.0332,
          0.0207, -0.0580, -0.0148,  0.0384, -0.0168,  0.0904, -0.0286, -0.0393,
         -0.0570, -0.0507, -0.0621,  0.1445,  0.0474,  0.0027, -0.0890, -0.1431,
         -0.0503,  0.1061,  0.1235, -0.0311,  0.0332, -0.0185,  0.0730,  0.0990,
         -0.0103,  0.0062,  0.1015,  0.0285, -0.1392,  0.0295, -0.0111,  0.0298,
          0.1234, -0.1424, -0.0513, -0.1154, -0.0964,  0.0334, -0.0886,  0.0573,
         -0.1014,  0.0194, -0.0040,  0.1522,  0.0542,  0.1412,  0.1015, -0.0874,
         -0.0556, -0.0115,  0.0787, -0.1246, -0.1298,  0.1407,  0.0403,  0.1098,
          0.0706, -0.1180, -0.1389,  0.1363, -0.0716, -0.0975, -0.1167, -0.0368,
          0.1098,  0.1251,  0.1288,  0.1076, -0.0888, -0.1478,  0.0172, -0.1498,
          0.0247,  0.1346, -0.0530, -0.0227, -0.1378, -0.0004,  0.0500, -0.1197,
          0.0755,  0.0571,  0.0466, -0.0768, -0.1522,  0.0928, -0.1428, -0.0625,
          0.1276, -0.1344,  0.0453, -0.0973, -0.0497, -0.1294,  0.0919,  0.0278,
         -0.0244, -0.0468, -0.0651,  0.0954,  0.1184,  0.0133, -0.0314,  0.0693,
          0.0125,  0.1036,  0.0301,  0.1197, -0.0121,  0.0617, -0.1215,  0.0176,
          0.1112, -0.1150, -0.0459,  0.0445, -0.1151,  0.0473,  0.1274, -0.0147,
          0.0476,  0.1016,  0.1241, -0.1287, -0.0929, -0.0481, -0.0075, -0.1020,
          0.1423,  0.0493,  0.0824,  0.1337, -0.1007, -0.0897,  0.1091, -0.0338,
         -0.1319, -0.1068,  0.1348, -0.0646,  0.0131,  0.0321,  0.1247, -0.1098,
          0.0006, -0.0241,  0.1159, -0.0460, -0.0408, -0.1315, -0.0616, -0.0137,
         -0.0145, -0.1393, -0.1462,  0.1032,  0.1031,  0.0245,  0.1470, -0.1323,
         -0.0552,  0.0704, -0.1031, -0.0989, -0.0630,  0.0802, -0.1468, -0.1160,
          0.0675, -0.0817, -0.0296, -0.0941, -0.0308,  0.0069,  0.0791, -0.1041,
          0.0229, -0.1396, -0.0862, -0.1455,  0.1266, -0.1126, -0.0689,  0.0854,
          0.0174, -0.0094,  0.0080, -0.1375,  0.0025, -0.1015,  0.1261,  0.0273,
          0.1115, -0.0299, -0.0806,  0.0366,  0.0838,  0.1506,  0.0954,  0.1515]],
       device='cuda:0', requires_grad=True)
conv1.bias 
 torch.Size([256]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
conv2.weight 
 torch.Size([256, 128]) 
 True 
 tensor([[ 0.0791, -0.0433, -0.0086,  ..., -0.0928, -0.0021,  0.0544],
        [-0.0687,  0.0876,  0.0734,  ..., -0.0109, -0.0622,  0.0954],
        [-0.0996,  0.0757, -0.0508,  ...,  0.0077, -0.0676, -0.1082],
        ...,
        [ 0.1220, -0.0831, -0.0232,  ...,  0.0648,  0.0740, -0.1011],
        [-0.1188, -0.0748,  0.0605,  ..., -0.0075, -0.0442, -0.0267],
        [-0.0882, -0.0786, -0.0065,  ...,  0.0164,  0.0956, -0.0932]],
       device='cuda:0') 
 Parameter containing:
tensor([[ 0.0791, -0.0433, -0.0086,  ..., -0.0928, -0.0021,  0.0544],
        [-0.0687,  0.0876,  0.0734,  ..., -0.0109, -0.0622,  0.0954],
        [-0.0996,  0.0757, -0.0508,  ...,  0.0077, -0.0676, -0.1082],
        ...,
        [ 0.1220, -0.0831, -0.0232,  ...,  0.0648,  0.0740, -0.1011],
        [-0.1188, -0.0748,  0.0605,  ..., -0.0075, -0.0442, -0.0267],
        [-0.0882, -0.0786, -0.0065,  ...,  0.0164,  0.0956, -0.0932]],
       device='cuda:0', requires_grad=True)
conv2.bias 
 torch.Size([128]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)
conv3.weight 
 torch.Size([128, 64]) 
 True 
 tensor([[-0.1583,  0.0452, -0.0182,  ...,  0.1003,  0.1682,  0.1391],
        [ 0.1755,  0.0717, -0.0056,  ..., -0.1612, -0.0181,  0.0194],
        [ 0.0751,  0.0265, -0.0059,  ...,  0.0759, -0.1594,  0.0532],
        ...,
        [ 0.1753,  0.1220,  0.0164,  ..., -0.1329, -0.0322, -0.0658],
        [-0.1053,  0.0200,  0.0706,  ...,  0.1471,  0.0414, -0.1102],
        [-0.1710,  0.0844, -0.1152,  ..., -0.1137, -0.1553, -0.0902]],
       device='cuda:0') 
 Parameter containing:
tensor([[-0.1583,  0.0452, -0.0182,  ...,  0.1003,  0.1682,  0.1391],
        [ 0.1755,  0.0717, -0.0056,  ..., -0.1612, -0.0181,  0.0194],
        [ 0.0751,  0.0265, -0.0059,  ...,  0.0759, -0.1594,  0.0532],
        ...,
        [ 0.1753,  0.1220,  0.0164,  ..., -0.1329, -0.0322, -0.0658],
        [-0.1053,  0.0200,  0.0706,  ...,  0.1471,  0.0414, -0.1102],
        [-0.1710,  0.0844, -0.1152,  ..., -0.1137, -0.1553, -0.0902]],
       device='cuda:0', requires_grad=True)
conv3.bias 
 torch.Size([64]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
conv4.weight 
 torch.Size([64, 32]) 
 True 
 tensor([[-0.1305, -0.0625,  0.0459,  ..., -0.2253, -0.0213, -0.1902],
        [ 0.0851,  0.0850,  0.0409,  ..., -0.2002, -0.2257,  0.0633],
        [ 0.0375,  0.2156,  0.1743,  ..., -0.1556,  0.0352, -0.1450],
        ...,
        [ 0.2072, -0.2008,  0.2159,  ..., -0.2262, -0.0588, -0.1757],
        [-0.0037, -0.2309,  0.0621,  ...,  0.1540, -0.0982, -0.0028],
        [-0.1636,  0.0098,  0.0834,  ...,  0.0187, -0.2358, -0.1795]],
       device='cuda:0') 
 Parameter containing:
tensor([[-0.1305, -0.0625,  0.0459,  ..., -0.2253, -0.0213, -0.1902],
        [ 0.0851,  0.0850,  0.0409,  ..., -0.2002, -0.2257,  0.0633],
        [ 0.0375,  0.2156,  0.1743,  ..., -0.1556,  0.0352, -0.1450],
        ...,
        [ 0.2072, -0.2008,  0.2159,  ..., -0.2262, -0.0588, -0.1757],
        [-0.0037, -0.2309,  0.0621,  ...,  0.1540, -0.0982, -0.0028],
        [-0.1636,  0.0098,  0.0834,  ...,  0.0187, -0.2358, -0.1795]],
       device='cuda:0', requires_grad=True)
conv4.bias 
 torch.Size([32]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)
conv5.weight 
 torch.Size([32, 1]) 
 True 
 tensor([[-0.1793],
        [ 0.1481],
        [-0.2199],
        [ 0.3918],
        [-0.1770],
        [-0.1478],
        [-0.2500],
        [-0.1851],
        [ 0.2681],
        [ 0.1260],
        [ 0.2761],
        [ 0.2912],
        [-0.0882],
        [-0.3643],
        [-0.2806],
        [-0.2275],
        [-0.1508],
        [-0.1577],
        [-0.0221],
        [ 0.1840],
        [-0.2526],
        [ 0.1213],
        [-0.2003],
        [ 0.1553],
        [ 0.0839],
        [ 0.3758],
        [-0.3431],
        [ 0.4094],
        [-0.1927],
        [ 0.0130],
        [-0.0066],
        [-0.2012]], device='cuda:0') 
 Parameter containing:
tensor([[-0.1793],
        [ 0.1481],
        [-0.2199],
        [ 0.3918],
        [-0.1770],
        [-0.1478],
        [-0.2500],
        [-0.1851],
        [ 0.2681],
        [ 0.1260],
        [ 0.2761],
        [ 0.2912],
        [-0.0882],
        [-0.3643],
        [-0.2806],
        [-0.2275],
        [-0.1508],
        [-0.1577],
        [-0.0221],
        [ 0.1840],
        [-0.2526],
        [ 0.1213],
        [-0.2003],
        [ 0.1553],
        [ 0.0839],
        [ 0.3758],
        [-0.3431],
        [ 0.4094],
        [-0.1927],
        [ 0.0130],
        [-0.0066],
        [-0.2012]], device='cuda:0', requires_grad=True)
conv5.bias 
 torch.Size([1]) 
 True 
 tensor([0.], device='cuda:0') 
 Parameter containing:
tensor([0.], device='cuda:0', requires_grad=True)



input node feature: 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].shape torch.Size([6796, 1]) 
g.ndata[nfet].sum tensor(33.1882, device='cuda:0')



input graph: 
g Graph(num_nodes=6796, num_edges=73186,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)}) 
g.edata[efet].shape torch.Size([73186, 1]) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
g.edata[efet].sum tensor(73186., device='cuda:0', grad_fn=<SumBackward0>) 
g.ndata[nfet].shape torch.Size([6796, 1]) 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].sum tensor(33.1882, device='cuda:0')
param0_0.shape torch.Size([256])
param.data[:, 0].shape torch.Size([256])



h after the first convolutional layer: 
 tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0',
       grad_fn=<AddBackward0>) 
h.shape torch.Size([6796, 256]) 
h.sum tensor(69.9890, device='cuda:0', grad_fn=<SumBackward0>)



h[:, 0].sum tensor(3.7588, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[0] tensor(3.8577, device='cuda:0')



h[100].sum tensor(4.5073, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[100] tensor(4.6259, device='cuda:0')



h[200].sum tensor(1.6462, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[200] tensor(1.6895, device='cuda:0')



h1 after relu, the first updating, and another relu: 
 tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0',
       grad_fn=<ReluBackward0>) 
h.shape torch.Size([6796, 256]) 
h.sum tensor(3252.5200, device='cuda:0', grad_fn=<SumBackward0>)



h2 after the second convolutional layer: 
 tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0008, 0.0016, 0.0000,  ..., 0.0013, 0.0015, 0.0021],
        [0.0042, 0.0086, 0.0000,  ..., 0.0067, 0.0076, 0.0110],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0', grad_fn=<ReluBackward0>) 
h2.shape torch.Size([6796, 128]) 
h2.sum tensor(11887.1797, device='cuda:0', grad_fn=<SumBackward0>)



h2[0].sum tensor(165.3098, device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param0_2).sum() + bias0 tensor(13.2243, device='cuda:0', grad_fn=<AddBackward0>)



h2[100].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param50_2).sum() + bias50 tensor(-35.6357, device='cuda:0', grad_fn=<AddBackward0>)



h2[200].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param100_2).sum() + bias100 tensor(-4.2673, device='cuda:0', grad_fn=<AddBackward0>)



g Graph(num_nodes=6796, num_edges=73186,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)})



 output, 
h5 tensor([[0.0042],
        [0.0052],
        [0.0074],
        ...,
        [0.0012],
        [0.0012],
        [0.0009]], device='cuda:0', grad_fn=<AddBackward0>) 
h5.shape torch.Size([6796, 1]) 
h5.sum tensor(106.3467, device='cuda:0', grad_fn=<SumBackward0>) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
g.edata[efet].shape torch.Size([73186, 1]) 
g.edata[efet].sum tensor(73186., device='cuda:0', grad_fn=<SumBackward0>)

Passing event 20 from the network before training 
result1: tensor([[0.0042],
        [0.0052],
        [0.0074],
        ...,
        [0.0012],
        [0.0012],
        [0.0009]], device='cuda:0', grad_fn=<AddBackward0>) 
result1.shape: torch.Size([6796, 1]) 
input: [0. 0. 0. ... 0. 0. 0.]
Traceback (most recent call last):
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLpppipiGcnReNewestweight7N2/./TrainingBha.py", line 5, in <module>
    from ModelBha import *
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLpppipiGcnReNewestweight7N2/ModelBha.py", line 148, in <module>
    fig.colorbar(ax2.matshow(sitonsquare(result1.reshape(6796)).get(), aspect=2, extent=[0, 288, 0, 43], origin='lower')\
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLpppipiGcnReNewestweight7N2/DataLoadBha.py", line 40, in sitonsquare
    sqevent[i, j + 144] = event[(wiresum[i]) + j + w]
  File "cupy/_core/core.pyx", line 1494, in cupy._core.core._ndarray_base.__len__
TypeError: len() of unsized object

real	0m19.592s
user	0m9.864s
sys	0m9.849s
