0: gpu033.ihep.ac.cn
GPU 0: Tesla V100-SXM2-32GB (UUID: GPU-6d3c827b-c4d8-2ca2-4892-99cb918e77c7)
GPU 1: Tesla V100-SXM2-32GB (UUID: GPU-774f3d5b-66dc-4310-663c-6453c60a5502)
GPU 2: Tesla V100-SXM2-32GB (UUID: GPU-9b687e6d-d94b-ad69-ea0a-fff9ca21a410)
Allocate GPU cards : 0,1,2

modinfo:
filename:       /lib/modules/3.10.0-1127.8.2.el7.x86_64/extra/nvidia.ko.xz
alias:          char-major-195-*
version:        450.36.06
supported:      external
license:        NVIDIA
retpoline:      Y
rhelversion:    7.8
srcversion:     BB5CB243542347D4EB0C79C
alias:          pci:v000010DEd*sv*sd*bc03sc02i00*
alias:          pci:v000010DEd*sv*sd*bc03sc00i00*
depends:        
vermagic:       3.10.0-1127.8.2.el7.x86_64 SMP mod_unload modversions 
parm:           NvSwitchRegDwords:NvSwitch regkey (charp)
parm:           NvSwitchBlacklist:NvSwitchBlacklist=uuid[,uuid...] (charp)
parm:           NVreg_ResmanDebugLevel:int
parm:           NVreg_RmLogonRC:int
parm:           NVreg_ModifyDeviceFiles:int
parm:           NVreg_DeviceFileUID:int
parm:           NVreg_DeviceFileGID:int
parm:           NVreg_DeviceFileMode:int
parm:           NVreg_InitializeSystemMemoryAllocations:int
parm:           NVreg_UsePageAttributeTable:int
parm:           NVreg_MapRegistersEarly:int
parm:           NVreg_RegisterForACPIEvents:int
parm:           NVreg_EnablePCIeGen3:int
parm:           NVreg_EnableMSI:int
parm:           NVreg_TCEBypassMode:int
parm:           NVreg_EnableStreamMemOPs:int
parm:           NVreg_EnableBacklightHandler:int
parm:           NVreg_RestrictProfilingToAdminUsers:int
parm:           NVreg_PreserveVideoMemoryAllocations:int
parm:           NVreg_DynamicPowerManagement:int
parm:           NVreg_DynamicPowerManagementVideoMemoryThreshold:int
parm:           NVreg_EnableUserNUMAManagement:int
parm:           NVreg_MemoryPoolSize:int
parm:           NVreg_KMallocHeapMaxSize:int
parm:           NVreg_VMallocHeapMaxSize:int
parm:           NVreg_IgnoreMMIOCheck:int
parm:           NVreg_NvLinkDisable:int
parm:           NVreg_EnablePCIERelaxedOrderingMode:int
parm:           NVreg_RegisterPCIDriver:int
parm:           NVreg_RegistryDwords:charp
parm:           NVreg_RegistryDwordsPerDevice:charp
parm:           NVreg_RmMsg:charp
parm:           NVreg_GpuBlacklist:charp
parm:           NVreg_TemporaryFilePath:charp
parm:           NVreg_AssignGpus:charp

nvidia-smi:
Tue Aug  9 17:06:35 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 450.36.06    Driver Version: 450.36.06    CUDA Version: 11.0     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Tesla V100-SXM2...  On   | 00000000:16:00.0 Off |                    0 |
| N/A   40C    P0    70W / 300W |      0MiB / 32510MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   1  Tesla V100-SXM2...  On   | 00000000:3A:00.0 Off |                    0 |
| N/A   35C    P0    67W / 300W |      0MiB / 32510MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   2  Tesla V100-SXM2...  On   | 00000000:3B:00.0 Off |                    0 |
| N/A   35C    P0    43W / 300W |      0MiB / 32510MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+

nvcc --version:
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2021 NVIDIA Corporation
Built on Sun_Mar_21_19:15:46_PDT_2021
Cuda compilation tools, release 11.3, V11.3.58
Build cuda_11.3.r11.3/compiler.29745058_0

 torch version: 1.10.2

 cuda version: 11.3

 is cuda available: True

 CUDNN VERSION: 8200

 Number CUDA Devices: 3

 CUDA Device Name: Tesla V100-SXM2-32GB

 CUDA Device Total Memory [GB]: 34.089730048

 Device capability: (7, 0) 

 Cuda deviice: <torch.cuda.device object at 0x2b47a2a97a00> 

 Is cuda initialized: True

 CUDA_HOME: /hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1

real	0m5.077s
user	0m1.778s
sys	0m0.847s
[17:06:41] /opt/dgl/src/runtime/tensordispatch.cc:43: TensorDispatcher: dlopen failed: /hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/dgl/tensoradapter/pytorch/libtensoradapter_pytorch_1.10.2.so: cannot open shared object file: No such file or directory
Using backend: pytorch
/hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/cupy/_environment.py:438: UserWarning: 
--------------------------------------------------------------------------------

  CuPy may not function correctly because multiple CuPy packages are installed
  in your environment:

    cupy, cupy-cuda110

  Follow these steps to resolve this issue:

    1. For all packages listed above, run the following command to remove all
       existing CuPy installations:

         $ pip uninstall <package_name>

      If you previously installed CuPy via conda, also run the following:

         $ conda uninstall cupy

    2. Install the appropriate CuPy package.
       Refer to the Installation Guide for detailed instructions.

         https://docs.cupy.dev/en/stable/install.html

--------------------------------------------------------------------------------

  warnings.warn(f'''




 Training ... 






 The Network ... 






 The graph ... 



edge_index
 tensor([[   0,    1,    2,  ..., 4907, 4907, 4907],
        [   1,    2,    3,  ..., 4918, 4919, 4920]]) 

edge_index shape
 torch.Size([2, 36593])
graph: Graph(num_nodes=6796, num_edges=36593,
      ndata_schemes={}
      edata_schemes={}) 
nodes: tensor([   0,    1,    2,  ..., 6793, 6794, 6795], device='cuda:0') 
nodes shape: torch.Size([6796]) 
edges: (tensor([   0,    1,    2,  ..., 4907, 4907, 4907], device='cuda:0'), tensor([   1,    2,    3,  ..., 4918, 4919, 4920], device='cuda:0')) 
edges shae:

number of nodes: 6796

number of edges: 73186

node features (random input): tensor([[-0.6819],
        [-1.9893],
        [-1.5795],
        ...,
        [-0.2353],
        [ 0.7226],
        [ 1.6689]], device='cuda:0', requires_grad=True) 
node features sum: tensor(-113.5196, device='cuda:0', grad_fn=<SumBackward0>)

edges features: tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
edges features sum: tensor(73186., device='cuda:0', grad_fn=<SumBackward0>)

example: 
Out degrees of node 234: 14

In degrees of node 234: 14





 Loading data ... 


shape (80000, 6796) (80000, 6796)
sum 5574226 8401300
shape torch.Size([80000, 6796]) torch.Size([80000, 6796])
Model name: DGLpppipiGcnReNewestweight7N2
net GCN(
  (conv1): GraphConv(in=1, out=256, normalization=both, activation=None)
  (conv2): GraphConv(in=256, out=128, normalization=both, activation=None)
  (conv3): GraphConv(in=128, out=64, normalization=both, activation=None)
  (conv4): GraphConv(in=64, out=32, normalization=both, activation=None)
  (conv5): GraphConv(in=32, out=1, normalization=both, activation=None)
)
conv1.weight 
 torch.Size([1, 256]) 
 True 
 tensor([[ 0.0464, -0.0820, -0.0776, -0.1121,  0.1107, -0.1344, -0.1376,  0.1249,
         -0.0589,  0.0408,  0.1237,  0.1429, -0.0814, -0.1443, -0.1302, -0.0104,
         -0.0864, -0.0988, -0.1362,  0.0428,  0.0018,  0.1202, -0.0188, -0.0058,
          0.1464, -0.0787, -0.1426, -0.0145,  0.0350, -0.1296, -0.1117, -0.0665,
          0.0746, -0.1270,  0.0674, -0.0845,  0.0998,  0.0111,  0.0075, -0.0462,
          0.1010, -0.1437, -0.0549, -0.0270,  0.1144,  0.0608,  0.1085, -0.0497,
          0.1365,  0.0023, -0.1156, -0.1358, -0.1430,  0.0016, -0.1214, -0.0162,
          0.0876, -0.0852,  0.0307, -0.0072, -0.1210,  0.1437, -0.0980, -0.0998,
          0.1442,  0.0801, -0.0207, -0.1218, -0.1388, -0.0281,  0.0833,  0.1165,
          0.0573,  0.1082, -0.1099, -0.1115,  0.0655, -0.1145, -0.0477,  0.0809,
         -0.0202, -0.0470,  0.0892, -0.0970,  0.0070,  0.1045, -0.0755, -0.0949,
          0.0779,  0.1071,  0.1035,  0.0433, -0.0246, -0.1312, -0.1250,  0.0533,
          0.0004, -0.0864, -0.1019,  0.0015, -0.1069,  0.0519,  0.0984, -0.0450,
         -0.0430, -0.1349,  0.0995,  0.0154, -0.0407, -0.0277,  0.1338, -0.0358,
         -0.0086,  0.0594, -0.0450, -0.0834, -0.0672, -0.0694,  0.0370,  0.1104,
         -0.0171,  0.1494, -0.0981, -0.1162, -0.0790,  0.0472, -0.0280,  0.1306,
          0.1039, -0.0263,  0.0521, -0.1409, -0.0699, -0.0979,  0.1315, -0.1047,
          0.0096,  0.0899,  0.0353, -0.0366, -0.0669,  0.0507,  0.0934,  0.1149,
         -0.1032, -0.1124, -0.0679, -0.0045, -0.0998,  0.0037,  0.0731,  0.0074,
         -0.0230, -0.1245, -0.1107,  0.0145, -0.0008, -0.1401,  0.0647,  0.0230,
          0.0840,  0.1029, -0.0079, -0.1264,  0.1320,  0.1243, -0.1013,  0.1160,
         -0.1488, -0.0168, -0.1264, -0.1114, -0.0547,  0.0603, -0.0142, -0.0962,
         -0.0964,  0.1247, -0.0828,  0.1125,  0.1196,  0.0816, -0.0154,  0.0396,
          0.0794, -0.0444,  0.0673, -0.1149, -0.0425,  0.1283, -0.0198,  0.0746,
         -0.0313,  0.1252,  0.0264,  0.0509, -0.0346, -0.0167, -0.1227,  0.0966,
          0.0988,  0.0499, -0.1446,  0.0911,  0.0083,  0.1132, -0.0783,  0.1519,
         -0.1198,  0.0818, -0.0481, -0.0948,  0.1027, -0.1152,  0.0960, -0.1313,
          0.0237, -0.0657,  0.1525,  0.0468,  0.0744, -0.1225, -0.1209, -0.0258,
          0.1059, -0.1135,  0.1240, -0.1182,  0.0880, -0.0141,  0.0749,  0.0625,
         -0.1307, -0.1100,  0.1013, -0.0074, -0.1210, -0.0765,  0.1205,  0.1188,
          0.0643,  0.0142,  0.0434,  0.1300,  0.0613,  0.0767, -0.0368, -0.0139,
         -0.0260, -0.0786, -0.1516,  0.0559, -0.1291, -0.1051, -0.0021,  0.1033]],
       device='cuda:0') 
 Parameter containing:
tensor([[ 0.0464, -0.0820, -0.0776, -0.1121,  0.1107, -0.1344, -0.1376,  0.1249,
         -0.0589,  0.0408,  0.1237,  0.1429, -0.0814, -0.1443, -0.1302, -0.0104,
         -0.0864, -0.0988, -0.1362,  0.0428,  0.0018,  0.1202, -0.0188, -0.0058,
          0.1464, -0.0787, -0.1426, -0.0145,  0.0350, -0.1296, -0.1117, -0.0665,
          0.0746, -0.1270,  0.0674, -0.0845,  0.0998,  0.0111,  0.0075, -0.0462,
          0.1010, -0.1437, -0.0549, -0.0270,  0.1144,  0.0608,  0.1085, -0.0497,
          0.1365,  0.0023, -0.1156, -0.1358, -0.1430,  0.0016, -0.1214, -0.0162,
          0.0876, -0.0852,  0.0307, -0.0072, -0.1210,  0.1437, -0.0980, -0.0998,
          0.1442,  0.0801, -0.0207, -0.1218, -0.1388, -0.0281,  0.0833,  0.1165,
          0.0573,  0.1082, -0.1099, -0.1115,  0.0655, -0.1145, -0.0477,  0.0809,
         -0.0202, -0.0470,  0.0892, -0.0970,  0.0070,  0.1045, -0.0755, -0.0949,
          0.0779,  0.1071,  0.1035,  0.0433, -0.0246, -0.1312, -0.1250,  0.0533,
          0.0004, -0.0864, -0.1019,  0.0015, -0.1069,  0.0519,  0.0984, -0.0450,
         -0.0430, -0.1349,  0.0995,  0.0154, -0.0407, -0.0277,  0.1338, -0.0358,
         -0.0086,  0.0594, -0.0450, -0.0834, -0.0672, -0.0694,  0.0370,  0.1104,
         -0.0171,  0.1494, -0.0981, -0.1162, -0.0790,  0.0472, -0.0280,  0.1306,
          0.1039, -0.0263,  0.0521, -0.1409, -0.0699, -0.0979,  0.1315, -0.1047,
          0.0096,  0.0899,  0.0353, -0.0366, -0.0669,  0.0507,  0.0934,  0.1149,
         -0.1032, -0.1124, -0.0679, -0.0045, -0.0998,  0.0037,  0.0731,  0.0074,
         -0.0230, -0.1245, -0.1107,  0.0145, -0.0008, -0.1401,  0.0647,  0.0230,
          0.0840,  0.1029, -0.0079, -0.1264,  0.1320,  0.1243, -0.1013,  0.1160,
         -0.1488, -0.0168, -0.1264, -0.1114, -0.0547,  0.0603, -0.0142, -0.0962,
         -0.0964,  0.1247, -0.0828,  0.1125,  0.1196,  0.0816, -0.0154,  0.0396,
          0.0794, -0.0444,  0.0673, -0.1149, -0.0425,  0.1283, -0.0198,  0.0746,
         -0.0313,  0.1252,  0.0264,  0.0509, -0.0346, -0.0167, -0.1227,  0.0966,
          0.0988,  0.0499, -0.1446,  0.0911,  0.0083,  0.1132, -0.0783,  0.1519,
         -0.1198,  0.0818, -0.0481, -0.0948,  0.1027, -0.1152,  0.0960, -0.1313,
          0.0237, -0.0657,  0.1525,  0.0468,  0.0744, -0.1225, -0.1209, -0.0258,
          0.1059, -0.1135,  0.1240, -0.1182,  0.0880, -0.0141,  0.0749,  0.0625,
         -0.1307, -0.1100,  0.1013, -0.0074, -0.1210, -0.0765,  0.1205,  0.1188,
          0.0643,  0.0142,  0.0434,  0.1300,  0.0613,  0.0767, -0.0368, -0.0139,
         -0.0260, -0.0786, -0.1516,  0.0559, -0.1291, -0.1051, -0.0021,  0.1033]],
       device='cuda:0', requires_grad=True)
conv1.bias 
 torch.Size([256]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
conv2.weight 
 torch.Size([256, 128]) 
 True 
 tensor([[-0.0069, -0.0854,  0.0486,  ..., -0.0280, -0.0914,  0.0361],
        [-0.0509, -0.0191,  0.0625,  ...,  0.0945,  0.1182, -0.0102],
        [ 0.0233, -0.0007,  0.0538,  ...,  0.0373, -0.1086, -0.0166],
        ...,
        [ 0.0579,  0.0339, -0.0771,  ...,  0.0238,  0.0946,  0.0931],
        [-0.0805,  0.0775,  0.0505,  ..., -0.0653,  0.0735, -0.1186],
        [-0.0607, -0.1212,  0.0145,  ..., -0.1028, -0.1026, -0.0313]],
       device='cuda:0') 
 Parameter containing:
tensor([[-0.0069, -0.0854,  0.0486,  ..., -0.0280, -0.0914,  0.0361],
        [-0.0509, -0.0191,  0.0625,  ...,  0.0945,  0.1182, -0.0102],
        [ 0.0233, -0.0007,  0.0538,  ...,  0.0373, -0.1086, -0.0166],
        ...,
        [ 0.0579,  0.0339, -0.0771,  ...,  0.0238,  0.0946,  0.0931],
        [-0.0805,  0.0775,  0.0505,  ..., -0.0653,  0.0735, -0.1186],
        [-0.0607, -0.1212,  0.0145,  ..., -0.1028, -0.1026, -0.0313]],
       device='cuda:0', requires_grad=True)
conv2.bias 
 torch.Size([128]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)
conv3.weight 
 torch.Size([128, 64]) 
 True 
 tensor([[-0.0958,  0.1514,  0.0954,  ..., -0.0286,  0.0814, -0.0189],
        [-0.0940,  0.1508,  0.0998,  ..., -0.0202,  0.0777,  0.1762],
        [ 0.1685,  0.1580, -0.1062,  ...,  0.0525,  0.1220,  0.1612],
        ...,
        [ 0.1158,  0.0057,  0.0866,  ...,  0.0756, -0.0063, -0.1346],
        [-0.1582, -0.0085,  0.1432,  ..., -0.0171, -0.0559, -0.0218],
        [-0.0094,  0.0416, -0.1257,  ..., -0.0961,  0.1486, -0.1123]],
       device='cuda:0') 
 Parameter containing:
tensor([[-0.0958,  0.1514,  0.0954,  ..., -0.0286,  0.0814, -0.0189],
        [-0.0940,  0.1508,  0.0998,  ..., -0.0202,  0.0777,  0.1762],
        [ 0.1685,  0.1580, -0.1062,  ...,  0.0525,  0.1220,  0.1612],
        ...,
        [ 0.1158,  0.0057,  0.0866,  ...,  0.0756, -0.0063, -0.1346],
        [-0.1582, -0.0085,  0.1432,  ..., -0.0171, -0.0559, -0.0218],
        [-0.0094,  0.0416, -0.1257,  ..., -0.0961,  0.1486, -0.1123]],
       device='cuda:0', requires_grad=True)
conv3.bias 
 torch.Size([64]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
conv4.weight 
 torch.Size([64, 32]) 
 True 
 tensor([[-0.1060, -0.0319,  0.0139,  ...,  0.0902,  0.1304,  0.1447],
        [-0.1954, -0.0190,  0.2245,  ..., -0.0713,  0.1517,  0.1925],
        [-0.1914, -0.0238,  0.2217,  ..., -0.2357,  0.0883, -0.0891],
        ...,
        [ 0.0140, -0.0432,  0.2156,  ...,  0.1918, -0.0221, -0.2329],
        [-0.0518, -0.0319, -0.0261,  ..., -0.1370,  0.0749, -0.1310],
        [ 0.1839, -0.0813, -0.0264,  ...,  0.1350, -0.0534, -0.1879]],
       device='cuda:0') 
 Parameter containing:
tensor([[-0.1060, -0.0319,  0.0139,  ...,  0.0902,  0.1304,  0.1447],
        [-0.1954, -0.0190,  0.2245,  ..., -0.0713,  0.1517,  0.1925],
        [-0.1914, -0.0238,  0.2217,  ..., -0.2357,  0.0883, -0.0891],
        ...,
        [ 0.0140, -0.0432,  0.2156,  ...,  0.1918, -0.0221, -0.2329],
        [-0.0518, -0.0319, -0.0261,  ..., -0.1370,  0.0749, -0.1310],
        [ 0.1839, -0.0813, -0.0264,  ...,  0.1350, -0.0534, -0.1879]],
       device='cuda:0', requires_grad=True)
conv4.bias 
 torch.Size([32]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)
conv5.weight 
 torch.Size([32, 1]) 
 True 
 tensor([[ 0.0831],
        [ 0.1922],
        [ 0.2484],
        [-0.0170],
        [-0.2803],
        [ 0.3346],
        [-0.1012],
        [ 0.3437],
        [ 0.3161],
        [-0.2249],
        [ 0.4233],
        [ 0.2447],
        [ 0.0087],
        [ 0.1398],
        [ 0.0502],
        [-0.2842],
        [ 0.1582],
        [ 0.2873],
        [ 0.4061],
        [ 0.4228],
        [ 0.0648],
        [-0.2529],
        [ 0.1065],
        [-0.0367],
        [ 0.4096],
        [ 0.4069],
        [-0.0134],
        [ 0.2094],
        [-0.2971],
        [ 0.1920],
        [ 0.1928],
        [ 0.2125]], device='cuda:0') 
 Parameter containing:
tensor([[ 0.0831],
        [ 0.1922],
        [ 0.2484],
        [-0.0170],
        [-0.2803],
        [ 0.3346],
        [-0.1012],
        [ 0.3437],
        [ 0.3161],
        [-0.2249],
        [ 0.4233],
        [ 0.2447],
        [ 0.0087],
        [ 0.1398],
        [ 0.0502],
        [-0.2842],
        [ 0.1582],
        [ 0.2873],
        [ 0.4061],
        [ 0.4228],
        [ 0.0648],
        [-0.2529],
        [ 0.1065],
        [-0.0367],
        [ 0.4096],
        [ 0.4069],
        [-0.0134],
        [ 0.2094],
        [-0.2971],
        [ 0.1920],
        [ 0.1928],
        [ 0.2125]], device='cuda:0', requires_grad=True)
conv5.bias 
 torch.Size([1]) 
 True 
 tensor([0.], device='cuda:0') 
 Parameter containing:
tensor([0.], device='cuda:0', requires_grad=True)
conv1.weight 
 torch.Size([1, 256]) 
 True 
 tensor([[ 6.1253e-02,  6.4947e-02, -2.2122e-02,  3.7091e-02, -1.0502e-01,
         -5.6367e-03,  2.9758e-03,  7.9147e-02, -3.3841e-02,  2.0916e-02,
         -9.8979e-02,  5.0254e-02,  9.1914e-02, -1.2064e-01,  5.8155e-02,
          5.3419e-02, -9.2965e-02, -1.5161e-01, -7.1120e-02,  1.1746e-01,
          2.3375e-02,  1.2099e-02,  1.5095e-01, -3.0039e-03, -8.8830e-02,
         -9.2736e-03,  7.2018e-02, -1.0062e-01, -7.5555e-02, -2.3499e-02,
         -1.2134e-02,  1.0237e-01, -1.0642e-02,  6.7793e-02,  8.7848e-02,
          5.4180e-02, -6.0819e-02, -9.3226e-02,  8.6534e-02,  3.1140e-02,
         -1.3049e-01,  5.3584e-02,  1.2586e-01,  1.0886e-03,  1.3481e-01,
         -5.5360e-02, -7.0342e-02,  1.2060e-01, -9.2417e-02, -2.3791e-02,
          1.3776e-01, -1.2971e-01, -9.9025e-02, -1.1857e-01,  7.6009e-02,
         -1.0429e-01, -1.7346e-02, -5.4472e-03, -3.2419e-02,  7.2211e-02,
         -5.0585e-02, -1.4836e-01, -8.4668e-03, -2.1687e-02, -8.4497e-02,
         -4.1552e-02,  6.5557e-02,  2.0546e-02, -1.0621e-01,  1.8203e-03,
         -5.9606e-02,  1.0556e-01,  1.8680e-03, -6.0886e-02,  2.3721e-04,
         -1.3274e-01,  1.1091e-01,  1.1510e-01, -1.1073e-01,  4.4780e-02,
          1.4024e-01, -9.6556e-02,  1.6181e-02, -1.2211e-01, -6.1087e-02,
          1.4836e-01, -4.9784e-02, -3.1003e-02, -9.2852e-02, -7.1096e-02,
          8.7449e-02, -7.1800e-02,  1.9843e-02, -7.3810e-02,  1.4371e-01,
          1.1601e-01,  1.1342e-01,  5.2454e-02, -9.8476e-02,  7.1609e-02,
          1.1790e-01, -1.4135e-01, -1.3834e-01,  3.7708e-02, -7.9984e-02,
         -1.3266e-01, -6.0346e-02, -4.2003e-02,  3.3032e-02,  3.5603e-02,
          6.4458e-02,  1.4480e-01,  4.5099e-02, -3.8376e-02,  1.2301e-01,
         -9.5551e-02,  8.2321e-02, -1.2387e-01,  1.4014e-01,  8.6529e-03,
          1.5000e-01,  1.4621e-01, -6.3595e-03,  1.1515e-01,  6.0695e-02,
         -5.7248e-02, -1.2121e-01,  1.2054e-01,  1.3890e-01,  1.4289e-01,
          1.2447e-01,  1.8391e-02, -2.7880e-02, -1.4365e-01, -9.4060e-02,
         -2.9177e-02,  4.9524e-02,  1.2000e-01,  2.0988e-02,  1.2574e-01,
         -7.7637e-02,  8.0503e-02, -6.9516e-02,  1.4126e-01,  1.4086e-01,
          1.3209e-01, -3.2561e-03,  1.1979e-01,  8.7184e-02, -3.9223e-02,
          1.4172e-01,  4.9268e-02, -1.4494e-01,  6.0887e-02, -1.3880e-01,
         -1.5708e-02, -1.1221e-01, -1.4287e-02,  1.3193e-01,  2.2842e-03,
          1.3647e-01,  1.0320e-01,  1.2604e-01, -6.4770e-02, -1.4487e-01,
          3.9347e-02, -6.5499e-02,  3.1249e-02,  3.0308e-02,  9.9707e-05,
         -1.1567e-01, -1.2070e-01, -4.6416e-02,  7.1884e-02, -3.5376e-02,
          6.5702e-02,  1.4821e-01, -3.4986e-02, -6.8980e-02, -1.1988e-01,
         -9.2735e-02,  2.9478e-02,  7.6279e-02, -1.6403e-02, -5.2148e-02,
          1.4481e-01, -6.7712e-02,  1.4014e-01,  1.3096e-01,  8.9697e-02,
         -9.3836e-02, -3.4380e-02,  4.5696e-02, -1.0954e-01,  1.3514e-01,
          1.3484e-01,  8.2941e-02, -8.3449e-02, -2.8890e-02, -6.0102e-02,
         -3.3294e-02,  6.7882e-02, -1.2863e-01,  7.7033e-02, -6.4995e-02,
          7.2869e-02, -1.1344e-02, -1.3073e-01, -7.0510e-02, -3.1014e-02,
          1.1908e-01, -1.1832e-01, -2.7105e-03,  5.5766e-02, -1.3684e-01,
          7.0176e-02, -2.7740e-02, -6.1932e-02, -6.5828e-02, -1.0570e-01,
          2.7529e-02, -1.2521e-01, -3.0048e-02, -3.6376e-02, -9.0825e-02,
          2.5493e-02, -1.0210e-01,  5.6298e-02,  2.7020e-02,  2.8963e-02,
         -7.2488e-02,  1.3644e-02,  1.3430e-01,  4.7189e-02,  9.2945e-02,
         -1.1784e-01, -1.3990e-01, -1.2187e-01,  1.3683e-01, -1.9408e-02,
         -7.4547e-02, -1.0670e-01,  1.3714e-01, -8.2921e-02, -8.4592e-02,
         -5.7011e-02, -9.2790e-02,  1.7491e-02,  1.6226e-02,  1.0524e-01,
          1.6227e-02,  1.2349e-02, -8.7110e-02, -6.2554e-02, -7.3672e-02,
         -3.4815e-02]], device='cuda:0') 
 Parameter containing:
tensor([[ 6.1253e-02,  6.4947e-02, -2.2122e-02,  3.7091e-02, -1.0502e-01,
         -5.6367e-03,  2.9758e-03,  7.9147e-02, -3.3841e-02,  2.0916e-02,
         -9.8979e-02,  5.0254e-02,  9.1914e-02, -1.2064e-01,  5.8155e-02,
          5.3419e-02, -9.2965e-02, -1.5161e-01, -7.1120e-02,  1.1746e-01,
          2.3375e-02,  1.2099e-02,  1.5095e-01, -3.0039e-03, -8.8830e-02,
         -9.2736e-03,  7.2018e-02, -1.0062e-01, -7.5555e-02, -2.3499e-02,
         -1.2134e-02,  1.0237e-01, -1.0642e-02,  6.7793e-02,  8.7848e-02,
          5.4180e-02, -6.0819e-02, -9.3226e-02,  8.6534e-02,  3.1140e-02,
         -1.3049e-01,  5.3584e-02,  1.2586e-01,  1.0886e-03,  1.3481e-01,
         -5.5360e-02, -7.0342e-02,  1.2060e-01, -9.2417e-02, -2.3791e-02,
          1.3776e-01, -1.2971e-01, -9.9025e-02, -1.1857e-01,  7.6009e-02,
         -1.0429e-01, -1.7346e-02, -5.4472e-03, -3.2419e-02,  7.2211e-02,
         -5.0585e-02, -1.4836e-01, -8.4668e-03, -2.1687e-02, -8.4497e-02,
         -4.1552e-02,  6.5557e-02,  2.0546e-02, -1.0621e-01,  1.8203e-03,
         -5.9606e-02,  1.0556e-01,  1.8680e-03, -6.0886e-02,  2.3721e-04,
         -1.3274e-01,  1.1091e-01,  1.1510e-01, -1.1073e-01,  4.4780e-02,
          1.4024e-01, -9.6556e-02,  1.6181e-02, -1.2211e-01, -6.1087e-02,
          1.4836e-01, -4.9784e-02, -3.1003e-02, -9.2852e-02, -7.1096e-02,
          8.7449e-02, -7.1800e-02,  1.9843e-02, -7.3810e-02,  1.4371e-01,
          1.1601e-01,  1.1342e-01,  5.2454e-02, -9.8476e-02,  7.1609e-02,
          1.1790e-01, -1.4135e-01, -1.3834e-01,  3.7708e-02, -7.9984e-02,
         -1.3266e-01, -6.0346e-02, -4.2003e-02,  3.3032e-02,  3.5603e-02,
          6.4458e-02,  1.4480e-01,  4.5099e-02, -3.8376e-02,  1.2301e-01,
         -9.5551e-02,  8.2321e-02, -1.2387e-01,  1.4014e-01,  8.6529e-03,
          1.5000e-01,  1.4621e-01, -6.3595e-03,  1.1515e-01,  6.0695e-02,
         -5.7248e-02, -1.2121e-01,  1.2054e-01,  1.3890e-01,  1.4289e-01,
          1.2447e-01,  1.8391e-02, -2.7880e-02, -1.4365e-01, -9.4060e-02,
         -2.9177e-02,  4.9524e-02,  1.2000e-01,  2.0988e-02,  1.2574e-01,
         -7.7637e-02,  8.0503e-02, -6.9516e-02,  1.4126e-01,  1.4086e-01,
          1.3209e-01, -3.2561e-03,  1.1979e-01,  8.7184e-02, -3.9223e-02,
          1.4172e-01,  4.9268e-02, -1.4494e-01,  6.0887e-02, -1.3880e-01,
         -1.5708e-02, -1.1221e-01, -1.4287e-02,  1.3193e-01,  2.2842e-03,
          1.3647e-01,  1.0320e-01,  1.2604e-01, -6.4770e-02, -1.4487e-01,
          3.9347e-02, -6.5499e-02,  3.1249e-02,  3.0308e-02,  9.9707e-05,
         -1.1567e-01, -1.2070e-01, -4.6416e-02,  7.1884e-02, -3.5376e-02,
          6.5702e-02,  1.4821e-01, -3.4986e-02, -6.8980e-02, -1.1988e-01,
         -9.2735e-02,  2.9478e-02,  7.6279e-02, -1.6403e-02, -5.2148e-02,
          1.4481e-01, -6.7712e-02,  1.4014e-01,  1.3096e-01,  8.9697e-02,
         -9.3836e-02, -3.4380e-02,  4.5696e-02, -1.0954e-01,  1.3514e-01,
          1.3484e-01,  8.2941e-02, -8.3449e-02, -2.8890e-02, -6.0102e-02,
         -3.3294e-02,  6.7882e-02, -1.2863e-01,  7.7033e-02, -6.4995e-02,
          7.2869e-02, -1.1344e-02, -1.3073e-01, -7.0510e-02, -3.1014e-02,
          1.1908e-01, -1.1832e-01, -2.7105e-03,  5.5766e-02, -1.3684e-01,
          7.0176e-02, -2.7740e-02, -6.1932e-02, -6.5828e-02, -1.0570e-01,
          2.7529e-02, -1.2521e-01, -3.0048e-02, -3.6376e-02, -9.0825e-02,
          2.5493e-02, -1.0210e-01,  5.6298e-02,  2.7020e-02,  2.8963e-02,
         -7.2488e-02,  1.3644e-02,  1.3430e-01,  4.7189e-02,  9.2945e-02,
         -1.1784e-01, -1.3990e-01, -1.2187e-01,  1.3683e-01, -1.9408e-02,
         -7.4547e-02, -1.0670e-01,  1.3714e-01, -8.2921e-02, -8.4592e-02,
         -5.7011e-02, -9.2790e-02,  1.7491e-02,  1.6226e-02,  1.0524e-01,
          1.6227e-02,  1.2349e-02, -8.7110e-02, -6.2554e-02, -7.3672e-02,
         -3.4815e-02]], device='cuda:0', requires_grad=True)
conv1.bias 
 torch.Size([256]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
conv2.weight 
 torch.Size([256, 128]) 
 True 
 tensor([[-0.0479, -0.0719,  0.0997,  ..., -0.0080, -0.0942,  0.0905],
        [ 0.0851,  0.0771, -0.0094,  ...,  0.0309, -0.0576,  0.0813],
        [-0.1036,  0.0901,  0.0452,  ...,  0.0138,  0.0139,  0.0733],
        ...,
        [-0.0879, -0.0719, -0.0380,  ..., -0.0670, -0.0629, -0.1130],
        [-0.0428,  0.0017, -0.0495,  ...,  0.0323,  0.0295,  0.1081],
        [ 0.0937,  0.0792,  0.0080,  ...,  0.0493, -0.1043,  0.0605]],
       device='cuda:0') 
 Parameter containing:
tensor([[-0.0479, -0.0719,  0.0997,  ..., -0.0080, -0.0942,  0.0905],
        [ 0.0851,  0.0771, -0.0094,  ...,  0.0309, -0.0576,  0.0813],
        [-0.1036,  0.0901,  0.0452,  ...,  0.0138,  0.0139,  0.0733],
        ...,
        [-0.0879, -0.0719, -0.0380,  ..., -0.0670, -0.0629, -0.1130],
        [-0.0428,  0.0017, -0.0495,  ...,  0.0323,  0.0295,  0.1081],
        [ 0.0937,  0.0792,  0.0080,  ...,  0.0493, -0.1043,  0.0605]],
       device='cuda:0', requires_grad=True)
conv2.bias 
 torch.Size([128]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)
conv3.weight 
 torch.Size([128, 64]) 
 True 
 tensor([[-0.0137, -0.1657, -0.0448,  ...,  0.1069, -0.0357,  0.0047],
        [ 0.0309, -0.0113, -0.0537,  ..., -0.1080,  0.0855,  0.1567],
        [ 0.1660, -0.1499,  0.0650,  ..., -0.0456,  0.0843, -0.0324],
        ...,
        [ 0.1176,  0.1173, -0.0207,  ..., -0.1398,  0.1180, -0.1231],
        [-0.0787,  0.1693,  0.1465,  ..., -0.0910,  0.0170, -0.0943],
        [ 0.0186, -0.0420,  0.0164,  ...,  0.0425, -0.0730, -0.1502]],
       device='cuda:0') 
 Parameter containing:
tensor([[-0.0137, -0.1657, -0.0448,  ...,  0.1069, -0.0357,  0.0047],
        [ 0.0309, -0.0113, -0.0537,  ..., -0.1080,  0.0855,  0.1567],
        [ 0.1660, -0.1499,  0.0650,  ..., -0.0456,  0.0843, -0.0324],
        ...,
        [ 0.1176,  0.1173, -0.0207,  ..., -0.1398,  0.1180, -0.1231],
        [-0.0787,  0.1693,  0.1465,  ..., -0.0910,  0.0170, -0.0943],
        [ 0.0186, -0.0420,  0.0164,  ...,  0.0425, -0.0730, -0.1502]],
       device='cuda:0', requires_grad=True)
conv3.bias 
 torch.Size([64]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
conv4.weight 
 torch.Size([64, 32]) 
 True 
 tensor([[ 0.1106,  0.1936,  0.0160,  ..., -0.2022, -0.1433, -0.0138],
        [ 0.0979, -0.0547, -0.1306,  ...,  0.0216,  0.0294,  0.0190],
        [ 0.0087, -0.0587,  0.0398,  ...,  0.2141,  0.0658,  0.1115],
        ...,
        [-0.1955, -0.1410, -0.0331,  ...,  0.1217, -0.2283,  0.0256],
        [-0.1954, -0.0774, -0.1273,  ...,  0.1862,  0.0927,  0.0210],
        [-0.1794, -0.0546, -0.1647,  ..., -0.1655, -0.2436, -0.0553]],
       device='cuda:0') 
 Parameter containing:
tensor([[ 0.1106,  0.1936,  0.0160,  ..., -0.2022, -0.1433, -0.0138],
        [ 0.0979, -0.0547, -0.1306,  ...,  0.0216,  0.0294,  0.0190],
        [ 0.0087, -0.0587,  0.0398,  ...,  0.2141,  0.0658,  0.1115],
        ...,
        [-0.1955, -0.1410, -0.0331,  ...,  0.1217, -0.2283,  0.0256],
        [-0.1954, -0.0774, -0.1273,  ...,  0.1862,  0.0927,  0.0210],
        [-0.1794, -0.0546, -0.1647,  ..., -0.1655, -0.2436, -0.0553]],
       device='cuda:0', requires_grad=True)
conv4.bias 
 torch.Size([32]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)
conv5.weight 
 torch.Size([32, 1]) 
 True 
 tensor([[ 1.6049e-01],
        [-3.8495e-01],
        [ 3.0486e-01],
        [-4.6651e-02],
        [ 3.1093e-01],
        [ 5.9340e-02],
        [ 3.5481e-01],
        [-8.5426e-02],
        [-3.6168e-01],
        [-2.5138e-01],
        [-1.3725e-01],
        [ 2.6686e-04],
        [-1.3733e-01],
        [-2.4593e-01],
        [ 3.3161e-01],
        [ 3.7703e-02],
        [-2.9846e-01],
        [-2.6926e-01],
        [ 2.5033e-01],
        [-3.7067e-01],
        [ 3.3578e-02],
        [ 4.2472e-01],
        [-1.3892e-01],
        [-4.1460e-02],
        [-3.0864e-01],
        [-2.4593e-01],
        [-3.1273e-01],
        [ 3.2217e-01],
        [ 7.9849e-03],
        [-2.4685e-01],
        [ 1.8412e-01],
        [-2.6327e-01]], device='cuda:0') 
 Parameter containing:
tensor([[ 1.6049e-01],
        [-3.8495e-01],
        [ 3.0486e-01],
        [-4.6651e-02],
        [ 3.1093e-01],
        [ 5.9340e-02],
        [ 3.5481e-01],
        [-8.5426e-02],
        [-3.6168e-01],
        [-2.5138e-01],
        [-1.3725e-01],
        [ 2.6686e-04],
        [-1.3733e-01],
        [-2.4593e-01],
        [ 3.3161e-01],
        [ 3.7703e-02],
        [-2.9846e-01],
        [-2.6926e-01],
        [ 2.5033e-01],
        [-3.7067e-01],
        [ 3.3578e-02],
        [ 4.2472e-01],
        [-1.3892e-01],
        [-4.1460e-02],
        [-3.0864e-01],
        [-2.4593e-01],
        [-3.1273e-01],
        [ 3.2217e-01],
        [ 7.9849e-03],
        [-2.4685e-01],
        [ 1.8412e-01],
        [-2.6327e-01]], device='cuda:0', requires_grad=True)
conv5.bias 
 torch.Size([1]) 
 True 
 tensor([0.], device='cuda:0') 
 Parameter containing:
tensor([0.], device='cuda:0', requires_grad=True)
Traceback (most recent call last):
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLpppipiGcnReNewestweight7N2/./TrainingBha.py", line 5, in <module>
    from ModelBha import *
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLpppipiGcnReNewestweight7N2/ModelBha.py", line 135, in <module>
    fig.colorbar(ax1.matshow(sitonsquare(traingnnpppipi[EvBTr]).get(), aspect=2, vmin=0, vmax=1, extent=[0, 288, 0, 43], origin='lower')\
AttributeError: 'numpy.ndarray' object has no attribute 'get'

real	0m21.805s
user	0m7.407s
sys	0m8.689s
