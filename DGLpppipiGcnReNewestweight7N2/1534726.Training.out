0: gpu022.ihep.ac.cn
GPU 0: Tesla V100-SXM2-32GB (UUID: GPU-7a90e930-602c-d4f7-ff60-d36003d041db)
GPU 1: Tesla V100-SXM2-32GB (UUID: GPU-7aada97a-9a9e-c263-3fc3-5712132f4f64)
GPU 2: Tesla V100-SXM2-32GB (UUID: GPU-9e68a6ae-784f-54e2-9f6c-81111f7818b4)
Allocate GPU cards : 0,1,2

modinfo:
filename:       /lib/modules/3.10.0-1127.8.2.el7.x86_64/extra/nvidia.ko.xz
alias:          char-major-195-*
version:        450.36.06
supported:      external
license:        NVIDIA
retpoline:      Y
rhelversion:    7.8
srcversion:     BB5CB243542347D4EB0C79C
alias:          pci:v000010DEd*sv*sd*bc03sc02i00*
alias:          pci:v000010DEd*sv*sd*bc03sc00i00*
depends:        
vermagic:       3.10.0-1127.8.2.el7.x86_64 SMP mod_unload modversions 
parm:           NvSwitchRegDwords:NvSwitch regkey (charp)
parm:           NvSwitchBlacklist:NvSwitchBlacklist=uuid[,uuid...] (charp)
parm:           NVreg_ResmanDebugLevel:int
parm:           NVreg_RmLogonRC:int
parm:           NVreg_ModifyDeviceFiles:int
parm:           NVreg_DeviceFileUID:int
parm:           NVreg_DeviceFileGID:int
parm:           NVreg_DeviceFileMode:int
parm:           NVreg_InitializeSystemMemoryAllocations:int
parm:           NVreg_UsePageAttributeTable:int
parm:           NVreg_MapRegistersEarly:int
parm:           NVreg_RegisterForACPIEvents:int
parm:           NVreg_EnablePCIeGen3:int
parm:           NVreg_EnableMSI:int
parm:           NVreg_TCEBypassMode:int
parm:           NVreg_EnableStreamMemOPs:int
parm:           NVreg_EnableBacklightHandler:int
parm:           NVreg_RestrictProfilingToAdminUsers:int
parm:           NVreg_PreserveVideoMemoryAllocations:int
parm:           NVreg_DynamicPowerManagement:int
parm:           NVreg_DynamicPowerManagementVideoMemoryThreshold:int
parm:           NVreg_EnableUserNUMAManagement:int
parm:           NVreg_MemoryPoolSize:int
parm:           NVreg_KMallocHeapMaxSize:int
parm:           NVreg_VMallocHeapMaxSize:int
parm:           NVreg_IgnoreMMIOCheck:int
parm:           NVreg_NvLinkDisable:int
parm:           NVreg_EnablePCIERelaxedOrderingMode:int
parm:           NVreg_RegisterPCIDriver:int
parm:           NVreg_RegistryDwords:charp
parm:           NVreg_RegistryDwordsPerDevice:charp
parm:           NVreg_RmMsg:charp
parm:           NVreg_GpuBlacklist:charp
parm:           NVreg_TemporaryFilePath:charp
parm:           NVreg_AssignGpus:charp

nvidia-smi:
Tue Aug  9 16:54:54 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 450.36.06    Driver Version: 450.36.06    CUDA Version: 11.0     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Tesla V100-SXM2...  On   | 00000000:1D:00.0 Off |                    0 |
| N/A   47C    P0    68W / 300W |      0MiB / 32510MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   1  Tesla V100-SXM2...  On   | 00000000:1E:00.0 Off |                    0 |
| N/A   45C    P0    65W / 300W |      0MiB / 32510MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   2  Tesla V100-SXM2...  On   | 00000000:1F:00.0 Off |                    0 |
| N/A   46C    P0    71W / 300W |      0MiB / 32510MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+

nvcc --version:
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2021 NVIDIA Corporation
Built on Sun_Mar_21_19:15:46_PDT_2021
Cuda compilation tools, release 11.3, V11.3.58
Build cuda_11.3.r11.3/compiler.29745058_0

 torch version: 1.10.2

 cuda version: 11.3

 is cuda available: True

 CUDNN VERSION: 8200

 Number CUDA Devices: 3

 CUDA Device Name: Tesla V100-SXM2-32GB

 CUDA Device Total Memory [GB]: 34.089730048

 Device capability: (7, 0) 

 Cuda deviice: <torch.cuda.device object at 0x2af7ad132a00> 

 Is cuda initialized: True

 CUDA_HOME: /hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1

real	0m22.755s
user	0m3.343s
sys	0m2.592s
[16:55:19] /opt/dgl/src/runtime/tensordispatch.cc:43: TensorDispatcher: dlopen failed: /hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/dgl/tensoradapter/pytorch/libtensoradapter_pytorch_1.10.2.so: cannot open shared object file: No such file or directory
Using backend: pytorch
/hpcfs/bes/mlgpu/hoseinkk/Miniconda3/envs/dgl1/lib/python3.9/site-packages/cupy/_environment.py:438: UserWarning: 
--------------------------------------------------------------------------------

  CuPy may not function correctly because multiple CuPy packages are installed
  in your environment:

    cupy, cupy-cuda110

  Follow these steps to resolve this issue:

    1. For all packages listed above, run the following command to remove all
       existing CuPy installations:

         $ pip uninstall <package_name>

      If you previously installed CuPy via conda, also run the following:

         $ conda uninstall cupy

    2. Install the appropriate CuPy package.
       Refer to the Installation Guide for detailed instructions.

         https://docs.cupy.dev/en/stable/install.html

--------------------------------------------------------------------------------

  warnings.warn(f'''




 Training ... 






 The Network ... 






 The graph ... 



edge_index
 tensor([[   0,    1,    2,  ..., 4907, 4907, 4907],
        [   1,    2,    3,  ..., 4918, 4919, 4920]]) 

edge_index shape
 torch.Size([2, 36593])
graph: Graph(num_nodes=6796, num_edges=36593,
      ndata_schemes={}
      edata_schemes={}) 
nodes: tensor([   0,    1,    2,  ..., 6793, 6794, 6795], device='cuda:0') 
nodes shape: torch.Size([6796]) 
edges: (tensor([   0,    1,    2,  ..., 4907, 4907, 4907], device='cuda:0'), tensor([   1,    2,    3,  ..., 4918, 4919, 4920], device='cuda:0')) 
edges shae:

number of nodes: 6796

number of edges: 73186

node features (random input): tensor([[-0.6792],
        [ 0.3848],
        [ 0.5114],
        ...,
        [ 0.8379],
        [-2.1330],
        [ 2.5176]], device='cuda:0', requires_grad=True) 
node features sum: tensor(-51.7272, device='cuda:0', grad_fn=<SumBackward0>)

edges features: tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
edges features sum: tensor(73186., device='cuda:0', grad_fn=<SumBackward0>)

example: 
Out degrees of node 234: 14

In degrees of node 234: 14





 Loading data ... 


shape (80000, 6796) (80000, 6796)
sum 5574226 8401300
shape torch.Size([80000, 6796]) torch.Size([80000, 6796])
Model name: DGLpppipiGcnReNewestweight7N2
net GCN(
  (conv1): GraphConv(in=1, out=256, normalization=both, activation=None)
  (conv2): GraphConv(in=256, out=128, normalization=both, activation=None)
  (conv3): GraphConv(in=128, out=64, normalization=both, activation=None)
  (conv4): GraphConv(in=64, out=32, normalization=both, activation=None)
  (conv5): GraphConv(in=32, out=1, normalization=both, activation=None)
)
conv1.weight 
 torch.Size([1, 256]) 
 True 
 tensor([[ 0.0781, -0.0497,  0.0972,  0.1265,  0.1304, -0.0926, -0.0921, -0.0882,
         -0.0409, -0.0673, -0.1098,  0.0165, -0.1417, -0.0032, -0.0308,  0.0030,
         -0.0277, -0.0308, -0.0397,  0.0267, -0.0106,  0.0500, -0.0680,  0.0920,
          0.0685, -0.0505, -0.0831,  0.1085,  0.1055,  0.0925,  0.1281,  0.1221,
          0.0907, -0.0939, -0.1419, -0.1216,  0.0315,  0.0732,  0.1438, -0.0960,
          0.0626,  0.0755, -0.1223, -0.0812,  0.1262, -0.1231, -0.1358,  0.0517,
         -0.0116, -0.1353, -0.0414,  0.1068,  0.0090, -0.0864, -0.1142, -0.0382,
          0.0641, -0.0760,  0.0956,  0.0918, -0.1034, -0.1106,  0.0940, -0.0589,
          0.0483,  0.0428, -0.0322, -0.0080,  0.0537,  0.0905,  0.0695,  0.1476,
         -0.1528,  0.1473,  0.0476,  0.1403,  0.0954,  0.1371,  0.0320, -0.1054,
         -0.0773, -0.0957, -0.1140, -0.0935,  0.1240, -0.0598,  0.0717,  0.0822,
         -0.0684,  0.0715,  0.0468,  0.0997, -0.0810,  0.1359, -0.1240, -0.1285,
         -0.1428, -0.0331,  0.0636, -0.0731, -0.1354, -0.0961,  0.0589, -0.1433,
         -0.0214, -0.0364,  0.1410, -0.1163,  0.1254,  0.1205,  0.0492, -0.1294,
         -0.1413,  0.0634, -0.0455,  0.0758, -0.1475,  0.0216,  0.0661,  0.0307,
          0.1525,  0.1025,  0.1174, -0.1085,  0.1181,  0.0994,  0.0100, -0.0245,
         -0.0508, -0.0406,  0.1084, -0.0987, -0.1287,  0.1268,  0.1519,  0.0806,
         -0.1111,  0.0898, -0.0211,  0.0312,  0.1330, -0.1093, -0.0935,  0.0150,
         -0.0123,  0.1376,  0.0607, -0.0745, -0.0283,  0.1030, -0.1262, -0.0383,
          0.1153,  0.0074,  0.1077,  0.1433,  0.0551,  0.1328, -0.1215, -0.0284,
          0.0792, -0.0387, -0.1447, -0.0968,  0.0299,  0.0993, -0.0598,  0.1114,
         -0.0429,  0.0146,  0.0007,  0.0530, -0.0264,  0.1518,  0.1300, -0.0743,
          0.0804,  0.1349, -0.1212, -0.0148,  0.0670,  0.0953,  0.0882, -0.0808,
         -0.1365,  0.0177,  0.0514,  0.0528, -0.0520, -0.0074, -0.0072, -0.1297,
          0.1291,  0.0360,  0.1519, -0.0299, -0.1015,  0.0082,  0.0777, -0.1103,
         -0.1065,  0.1045,  0.0931, -0.0851, -0.0761, -0.0808, -0.1420,  0.0172,
          0.1418,  0.1522, -0.0667,  0.0135,  0.1074,  0.1512, -0.0807,  0.1036,
         -0.0892,  0.0828,  0.1094, -0.1132,  0.0615,  0.0373,  0.0715,  0.0768,
          0.0296, -0.0155, -0.1384, -0.0789, -0.1412,  0.1095, -0.0111,  0.0247,
          0.1247,  0.0395,  0.0028,  0.0169, -0.1180,  0.1451,  0.0692,  0.0856,
         -0.0120,  0.0943,  0.0027, -0.0578, -0.0520,  0.0926,  0.0426, -0.0201,
          0.0207,  0.1129, -0.1391,  0.0571,  0.1087,  0.0271,  0.0500, -0.0834]],
       device='cuda:0') 
 Parameter containing:
tensor([[ 0.0781, -0.0497,  0.0972,  0.1265,  0.1304, -0.0926, -0.0921, -0.0882,
         -0.0409, -0.0673, -0.1098,  0.0165, -0.1417, -0.0032, -0.0308,  0.0030,
         -0.0277, -0.0308, -0.0397,  0.0267, -0.0106,  0.0500, -0.0680,  0.0920,
          0.0685, -0.0505, -0.0831,  0.1085,  0.1055,  0.0925,  0.1281,  0.1221,
          0.0907, -0.0939, -0.1419, -0.1216,  0.0315,  0.0732,  0.1438, -0.0960,
          0.0626,  0.0755, -0.1223, -0.0812,  0.1262, -0.1231, -0.1358,  0.0517,
         -0.0116, -0.1353, -0.0414,  0.1068,  0.0090, -0.0864, -0.1142, -0.0382,
          0.0641, -0.0760,  0.0956,  0.0918, -0.1034, -0.1106,  0.0940, -0.0589,
          0.0483,  0.0428, -0.0322, -0.0080,  0.0537,  0.0905,  0.0695,  0.1476,
         -0.1528,  0.1473,  0.0476,  0.1403,  0.0954,  0.1371,  0.0320, -0.1054,
         -0.0773, -0.0957, -0.1140, -0.0935,  0.1240, -0.0598,  0.0717,  0.0822,
         -0.0684,  0.0715,  0.0468,  0.0997, -0.0810,  0.1359, -0.1240, -0.1285,
         -0.1428, -0.0331,  0.0636, -0.0731, -0.1354, -0.0961,  0.0589, -0.1433,
         -0.0214, -0.0364,  0.1410, -0.1163,  0.1254,  0.1205,  0.0492, -0.1294,
         -0.1413,  0.0634, -0.0455,  0.0758, -0.1475,  0.0216,  0.0661,  0.0307,
          0.1525,  0.1025,  0.1174, -0.1085,  0.1181,  0.0994,  0.0100, -0.0245,
         -0.0508, -0.0406,  0.1084, -0.0987, -0.1287,  0.1268,  0.1519,  0.0806,
         -0.1111,  0.0898, -0.0211,  0.0312,  0.1330, -0.1093, -0.0935,  0.0150,
         -0.0123,  0.1376,  0.0607, -0.0745, -0.0283,  0.1030, -0.1262, -0.0383,
          0.1153,  0.0074,  0.1077,  0.1433,  0.0551,  0.1328, -0.1215, -0.0284,
          0.0792, -0.0387, -0.1447, -0.0968,  0.0299,  0.0993, -0.0598,  0.1114,
         -0.0429,  0.0146,  0.0007,  0.0530, -0.0264,  0.1518,  0.1300, -0.0743,
          0.0804,  0.1349, -0.1212, -0.0148,  0.0670,  0.0953,  0.0882, -0.0808,
         -0.1365,  0.0177,  0.0514,  0.0528, -0.0520, -0.0074, -0.0072, -0.1297,
          0.1291,  0.0360,  0.1519, -0.0299, -0.1015,  0.0082,  0.0777, -0.1103,
         -0.1065,  0.1045,  0.0931, -0.0851, -0.0761, -0.0808, -0.1420,  0.0172,
          0.1418,  0.1522, -0.0667,  0.0135,  0.1074,  0.1512, -0.0807,  0.1036,
         -0.0892,  0.0828,  0.1094, -0.1132,  0.0615,  0.0373,  0.0715,  0.0768,
          0.0296, -0.0155, -0.1384, -0.0789, -0.1412,  0.1095, -0.0111,  0.0247,
          0.1247,  0.0395,  0.0028,  0.0169, -0.1180,  0.1451,  0.0692,  0.0856,
         -0.0120,  0.0943,  0.0027, -0.0578, -0.0520,  0.0926,  0.0426, -0.0201,
          0.0207,  0.1129, -0.1391,  0.0571,  0.1087,  0.0271,  0.0500, -0.0834]],
       device='cuda:0', requires_grad=True)
conv1.bias 
 torch.Size([256]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
conv2.weight 
 torch.Size([256, 128]) 
 True 
 tensor([[ 1.0291e-01, -9.4683e-02,  8.6492e-02,  ..., -1.0932e-01,
         -5.8787e-03,  1.8085e-02],
        [ 5.7181e-02, -1.1679e-01,  5.4297e-02,  ..., -3.2679e-02,
          8.5187e-02,  1.6002e-02],
        [-6.7638e-02,  4.9197e-02,  2.7086e-02,  ..., -6.7430e-02,
         -4.8079e-02, -1.1397e-01],
        ...,
        [-8.2240e-02, -7.2110e-03,  6.6116e-05,  ..., -5.0673e-02,
         -3.2948e-02, -4.3160e-02],
        [-9.1908e-02, -6.6141e-02, -5.7469e-02,  ..., -7.5523e-02,
          4.1910e-02,  1.1614e-01],
        [-7.8682e-02,  7.0484e-02, -7.8426e-02,  ..., -1.0302e-01,
         -9.5029e-03,  2.4746e-02]], device='cuda:0') 
 Parameter containing:
tensor([[ 1.0291e-01, -9.4683e-02,  8.6492e-02,  ..., -1.0932e-01,
         -5.8787e-03,  1.8085e-02],
        [ 5.7181e-02, -1.1679e-01,  5.4297e-02,  ..., -3.2679e-02,
          8.5187e-02,  1.6002e-02],
        [-6.7638e-02,  4.9197e-02,  2.7086e-02,  ..., -6.7430e-02,
         -4.8079e-02, -1.1397e-01],
        ...,
        [-8.2240e-02, -7.2110e-03,  6.6116e-05,  ..., -5.0673e-02,
         -3.2948e-02, -4.3160e-02],
        [-9.1908e-02, -6.6141e-02, -5.7469e-02,  ..., -7.5523e-02,
          4.1910e-02,  1.1614e-01],
        [-7.8682e-02,  7.0484e-02, -7.8426e-02,  ..., -1.0302e-01,
         -9.5029e-03,  2.4746e-02]], device='cuda:0', requires_grad=True)
conv2.bias 
 torch.Size([128]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)
conv3.weight 
 torch.Size([128, 64]) 
 True 
 tensor([[-0.0705,  0.1502,  0.1349,  ..., -0.1271, -0.0049,  0.1508],
        [ 0.1432, -0.0996, -0.1248,  ..., -0.0570,  0.0046, -0.1484],
        [-0.1640,  0.0483,  0.1288,  ..., -0.0479,  0.1633,  0.0999],
        ...,
        [ 0.0161, -0.1383, -0.0601,  ...,  0.1182,  0.0937, -0.1271],
        [ 0.1375, -0.0367, -0.0889,  ..., -0.0676, -0.1624, -0.0614],
        [-0.0720,  0.0723,  0.1404,  ...,  0.0794, -0.0708,  0.1257]],
       device='cuda:0') 
 Parameter containing:
tensor([[-0.0705,  0.1502,  0.1349,  ..., -0.1271, -0.0049,  0.1508],
        [ 0.1432, -0.0996, -0.1248,  ..., -0.0570,  0.0046, -0.1484],
        [-0.1640,  0.0483,  0.1288,  ..., -0.0479,  0.1633,  0.0999],
        ...,
        [ 0.0161, -0.1383, -0.0601,  ...,  0.1182,  0.0937, -0.1271],
        [ 0.1375, -0.0367, -0.0889,  ..., -0.0676, -0.1624, -0.0614],
        [-0.0720,  0.0723,  0.1404,  ...,  0.0794, -0.0708,  0.1257]],
       device='cuda:0', requires_grad=True)
conv3.bias 
 torch.Size([64]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
conv4.weight 
 torch.Size([64, 32]) 
 True 
 tensor([[-0.0938,  0.0155, -0.1524,  ..., -0.2061,  0.0115, -0.0524],
        [ 0.1421,  0.2052, -0.1430,  ...,  0.1395, -0.1848,  0.2463],
        [-0.1544, -0.0416,  0.0346,  ..., -0.1292,  0.0514, -0.0540],
        ...,
        [ 0.1573, -0.0760,  0.1914,  ...,  0.1104,  0.0099,  0.1471],
        [ 0.1546,  0.0986,  0.0276,  ..., -0.2071,  0.0951, -0.0172],
        [-0.1913, -0.2321, -0.1596,  ...,  0.1332, -0.0169,  0.1053]],
       device='cuda:0') 
 Parameter containing:
tensor([[-0.0938,  0.0155, -0.1524,  ..., -0.2061,  0.0115, -0.0524],
        [ 0.1421,  0.2052, -0.1430,  ...,  0.1395, -0.1848,  0.2463],
        [-0.1544, -0.0416,  0.0346,  ..., -0.1292,  0.0514, -0.0540],
        ...,
        [ 0.1573, -0.0760,  0.1914,  ...,  0.1104,  0.0099,  0.1471],
        [ 0.1546,  0.0986,  0.0276,  ..., -0.2071,  0.0951, -0.0172],
        [-0.1913, -0.2321, -0.1596,  ...,  0.1332, -0.0169,  0.1053]],
       device='cuda:0', requires_grad=True)
conv4.bias 
 torch.Size([32]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)
conv5.weight 
 torch.Size([32, 1]) 
 True 
 tensor([[ 0.0947],
        [ 0.0006],
        [-0.2505],
        [ 0.1086],
        [-0.4217],
        [-0.1118],
        [-0.0606],
        [-0.1870],
        [-0.3787],
        [ 0.0894],
        [ 0.1436],
        [-0.0896],
        [ 0.3340],
        [-0.1901],
        [ 0.0972],
        [-0.2198],
        [ 0.3551],
        [-0.0277],
        [-0.3499],
        [ 0.3342],
        [-0.0041],
        [-0.4096],
        [ 0.1643],
        [ 0.3924],
        [-0.0867],
        [-0.3419],
        [-0.1886],
        [ 0.4184],
        [-0.1178],
        [ 0.1301],
        [ 0.3923],
        [ 0.1212]], device='cuda:0') 
 Parameter containing:
tensor([[ 0.0947],
        [ 0.0006],
        [-0.2505],
        [ 0.1086],
        [-0.4217],
        [-0.1118],
        [-0.0606],
        [-0.1870],
        [-0.3787],
        [ 0.0894],
        [ 0.1436],
        [-0.0896],
        [ 0.3340],
        [-0.1901],
        [ 0.0972],
        [-0.2198],
        [ 0.3551],
        [-0.0277],
        [-0.3499],
        [ 0.3342],
        [-0.0041],
        [-0.4096],
        [ 0.1643],
        [ 0.3924],
        [-0.0867],
        [-0.3419],
        [-0.1886],
        [ 0.4184],
        [-0.1178],
        [ 0.1301],
        [ 0.3923],
        [ 0.1212]], device='cuda:0', requires_grad=True)
conv5.bias 
 torch.Size([1]) 
 True 
 tensor([0.], device='cuda:0') 
 Parameter containing:
tensor([0.], device='cuda:0', requires_grad=True)
conv1.weight 
 torch.Size([1, 256]) 
 True 
 tensor([[ 0.0042,  0.0774,  0.1138,  0.0443, -0.0506,  0.0210,  0.1360, -0.0765,
         -0.0382, -0.1225,  0.1038,  0.0349,  0.0389, -0.0923,  0.1319, -0.1258,
          0.0292, -0.0357, -0.0091, -0.1135, -0.0927, -0.0997,  0.0354, -0.1293,
         -0.0420, -0.1140, -0.0241,  0.1371, -0.1519,  0.0983,  0.1400, -0.0510,
         -0.1096, -0.1014, -0.0009,  0.0282,  0.1234, -0.0364, -0.1172, -0.1206,
          0.0889,  0.1109, -0.0106,  0.0272,  0.0631,  0.1252,  0.1251,  0.0488,
         -0.1181, -0.0698,  0.1361,  0.0342, -0.1203, -0.1509, -0.1076, -0.0521,
         -0.0937, -0.1083, -0.0483, -0.0622,  0.0272,  0.0190, -0.0331, -0.1343,
          0.0352, -0.0632, -0.1168,  0.0102, -0.0572,  0.0640,  0.1244,  0.0411,
         -0.1334, -0.0015, -0.0447, -0.0133,  0.0141,  0.0062,  0.0368, -0.0442,
         -0.1027, -0.0160, -0.0550,  0.0617,  0.0646,  0.0142,  0.1359, -0.1471,
         -0.1081, -0.0774,  0.0377, -0.1326, -0.1411,  0.1296, -0.1017, -0.0858,
          0.0362, -0.0480, -0.1344, -0.0780,  0.0508,  0.0739, -0.1079,  0.1069,
         -0.1092,  0.0291, -0.0665, -0.0226, -0.1401, -0.1109, -0.1098,  0.0678,
         -0.0114, -0.1322,  0.1433, -0.0626, -0.0787, -0.1181,  0.0802, -0.1238,
         -0.0585, -0.0905,  0.0885, -0.0281,  0.1111,  0.0927,  0.0992, -0.0272,
         -0.0416, -0.0491,  0.0651,  0.0159, -0.0972,  0.0541,  0.0601,  0.1063,
         -0.0912,  0.0715,  0.0006,  0.0286,  0.0204, -0.0958,  0.0487,  0.1319,
         -0.1088,  0.1436,  0.0868,  0.0644, -0.0960,  0.1503,  0.0496, -0.1152,
          0.0246,  0.0253, -0.1324, -0.0716,  0.0342, -0.0617, -0.0229,  0.0763,
          0.0053,  0.0636,  0.1139, -0.0033,  0.1344, -0.0811,  0.1203, -0.0087,
         -0.0411,  0.1168, -0.0768, -0.1111,  0.1371, -0.0892,  0.0643, -0.1351,
          0.1141, -0.0288,  0.1326, -0.0891,  0.1129,  0.0302, -0.0305,  0.0454,
          0.1228,  0.0938, -0.1193, -0.0453,  0.1434,  0.1198,  0.0467, -0.0581,
          0.1146,  0.0776,  0.0304, -0.0340, -0.1441, -0.0573,  0.0980, -0.0591,
         -0.1425, -0.1431, -0.1067,  0.0636,  0.0643,  0.1492,  0.0063,  0.0442,
          0.1297,  0.1403,  0.0623,  0.0928, -0.1398,  0.0430,  0.1218,  0.0739,
          0.1322, -0.0911,  0.0256,  0.0838,  0.0961,  0.0251, -0.0427, -0.1179,
         -0.0310,  0.1426,  0.0742, -0.0491,  0.1062, -0.0176, -0.0131, -0.1341,
         -0.0605,  0.1065, -0.0429,  0.0995, -0.0217, -0.0629,  0.1450,  0.0897,
         -0.0675, -0.1346, -0.0222, -0.1160,  0.1382, -0.0866,  0.0853, -0.1425,
          0.0080,  0.0877,  0.0547, -0.1283, -0.1307, -0.0294, -0.1482,  0.1039]],
       device='cuda:0') 
 Parameter containing:
tensor([[ 0.0042,  0.0774,  0.1138,  0.0443, -0.0506,  0.0210,  0.1360, -0.0765,
         -0.0382, -0.1225,  0.1038,  0.0349,  0.0389, -0.0923,  0.1319, -0.1258,
          0.0292, -0.0357, -0.0091, -0.1135, -0.0927, -0.0997,  0.0354, -0.1293,
         -0.0420, -0.1140, -0.0241,  0.1371, -0.1519,  0.0983,  0.1400, -0.0510,
         -0.1096, -0.1014, -0.0009,  0.0282,  0.1234, -0.0364, -0.1172, -0.1206,
          0.0889,  0.1109, -0.0106,  0.0272,  0.0631,  0.1252,  0.1251,  0.0488,
         -0.1181, -0.0698,  0.1361,  0.0342, -0.1203, -0.1509, -0.1076, -0.0521,
         -0.0937, -0.1083, -0.0483, -0.0622,  0.0272,  0.0190, -0.0331, -0.1343,
          0.0352, -0.0632, -0.1168,  0.0102, -0.0572,  0.0640,  0.1244,  0.0411,
         -0.1334, -0.0015, -0.0447, -0.0133,  0.0141,  0.0062,  0.0368, -0.0442,
         -0.1027, -0.0160, -0.0550,  0.0617,  0.0646,  0.0142,  0.1359, -0.1471,
         -0.1081, -0.0774,  0.0377, -0.1326, -0.1411,  0.1296, -0.1017, -0.0858,
          0.0362, -0.0480, -0.1344, -0.0780,  0.0508,  0.0739, -0.1079,  0.1069,
         -0.1092,  0.0291, -0.0665, -0.0226, -0.1401, -0.1109, -0.1098,  0.0678,
         -0.0114, -0.1322,  0.1433, -0.0626, -0.0787, -0.1181,  0.0802, -0.1238,
         -0.0585, -0.0905,  0.0885, -0.0281,  0.1111,  0.0927,  0.0992, -0.0272,
         -0.0416, -0.0491,  0.0651,  0.0159, -0.0972,  0.0541,  0.0601,  0.1063,
         -0.0912,  0.0715,  0.0006,  0.0286,  0.0204, -0.0958,  0.0487,  0.1319,
         -0.1088,  0.1436,  0.0868,  0.0644, -0.0960,  0.1503,  0.0496, -0.1152,
          0.0246,  0.0253, -0.1324, -0.0716,  0.0342, -0.0617, -0.0229,  0.0763,
          0.0053,  0.0636,  0.1139, -0.0033,  0.1344, -0.0811,  0.1203, -0.0087,
         -0.0411,  0.1168, -0.0768, -0.1111,  0.1371, -0.0892,  0.0643, -0.1351,
          0.1141, -0.0288,  0.1326, -0.0891,  0.1129,  0.0302, -0.0305,  0.0454,
          0.1228,  0.0938, -0.1193, -0.0453,  0.1434,  0.1198,  0.0467, -0.0581,
          0.1146,  0.0776,  0.0304, -0.0340, -0.1441, -0.0573,  0.0980, -0.0591,
         -0.1425, -0.1431, -0.1067,  0.0636,  0.0643,  0.1492,  0.0063,  0.0442,
          0.1297,  0.1403,  0.0623,  0.0928, -0.1398,  0.0430,  0.1218,  0.0739,
          0.1322, -0.0911,  0.0256,  0.0838,  0.0961,  0.0251, -0.0427, -0.1179,
         -0.0310,  0.1426,  0.0742, -0.0491,  0.1062, -0.0176, -0.0131, -0.1341,
         -0.0605,  0.1065, -0.0429,  0.0995, -0.0217, -0.0629,  0.1450,  0.0897,
         -0.0675, -0.1346, -0.0222, -0.1160,  0.1382, -0.0866,  0.0853, -0.1425,
          0.0080,  0.0877,  0.0547, -0.1283, -0.1307, -0.0294, -0.1482,  0.1039]],
       device='cuda:0', requires_grad=True)
conv1.bias 
 torch.Size([256]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
conv2.weight 
 torch.Size([256, 128]) 
 True 
 tensor([[ 0.1003, -0.0040,  0.0678,  ...,  0.0011,  0.0453, -0.0153],
        [ 0.0908,  0.0205,  0.0864,  ..., -0.0450,  0.0376, -0.0398],
        [ 0.0339,  0.0281,  0.0859,  ...,  0.0218, -0.0864, -0.0979],
        ...,
        [ 0.0335, -0.0369, -0.0299,  ..., -0.0623, -0.0831, -0.0082],
        [-0.0615, -0.0369, -0.0553,  ...,  0.0189,  0.1110,  0.0197],
        [-0.0045, -0.0233, -0.0207,  ...,  0.1215,  0.1007, -0.0554]],
       device='cuda:0') 
 Parameter containing:
tensor([[ 0.1003, -0.0040,  0.0678,  ...,  0.0011,  0.0453, -0.0153],
        [ 0.0908,  0.0205,  0.0864,  ..., -0.0450,  0.0376, -0.0398],
        [ 0.0339,  0.0281,  0.0859,  ...,  0.0218, -0.0864, -0.0979],
        ...,
        [ 0.0335, -0.0369, -0.0299,  ..., -0.0623, -0.0831, -0.0082],
        [-0.0615, -0.0369, -0.0553,  ...,  0.0189,  0.1110,  0.0197],
        [-0.0045, -0.0233, -0.0207,  ...,  0.1215,  0.1007, -0.0554]],
       device='cuda:0', requires_grad=True)
conv2.bias 
 torch.Size([128]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)
conv3.weight 
 torch.Size([128, 64]) 
 True 
 tensor([[ 0.0139, -0.1380, -0.0273,  ..., -0.0103, -0.1340,  0.1440],
        [-0.0811,  0.1275, -0.0514,  ..., -0.0226,  0.0651, -0.0194],
        [-0.1599,  0.0461, -0.0846,  ...,  0.0078, -0.0224, -0.1376],
        ...,
        [-0.1480, -0.0308, -0.0020,  ...,  0.1740,  0.1115,  0.0310],
        [-0.0989, -0.0539,  0.0024,  ..., -0.0630, -0.1416,  0.1532],
        [ 0.0162, -0.1189,  0.0655,  ..., -0.1632, -0.1414,  0.0700]],
       device='cuda:0') 
 Parameter containing:
tensor([[ 0.0139, -0.1380, -0.0273,  ..., -0.0103, -0.1340,  0.1440],
        [-0.0811,  0.1275, -0.0514,  ..., -0.0226,  0.0651, -0.0194],
        [-0.1599,  0.0461, -0.0846,  ...,  0.0078, -0.0224, -0.1376],
        ...,
        [-0.1480, -0.0308, -0.0020,  ...,  0.1740,  0.1115,  0.0310],
        [-0.0989, -0.0539,  0.0024,  ..., -0.0630, -0.1416,  0.1532],
        [ 0.0162, -0.1189,  0.0655,  ..., -0.1632, -0.1414,  0.0700]],
       device='cuda:0', requires_grad=True)
conv3.bias 
 torch.Size([64]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
conv4.weight 
 torch.Size([64, 32]) 
 True 
 tensor([[-0.2186,  0.1264, -0.0066,  ...,  0.2151,  0.1395,  0.0365],
        [-0.1384, -0.1825, -0.1835,  ..., -0.0261,  0.0021,  0.0578],
        [-0.0442,  0.0391, -0.1073,  ..., -0.1820, -0.1175, -0.0859],
        ...,
        [-0.1151,  0.1309,  0.0249,  ...,  0.1040,  0.0859,  0.0364],
        [ 0.0367, -0.1835,  0.0544,  ..., -0.1835,  0.0157,  0.0938],
        [-0.1362, -0.0141, -0.0775,  ..., -0.2042,  0.1164, -0.1345]],
       device='cuda:0') 
 Parameter containing:
tensor([[-0.2186,  0.1264, -0.0066,  ...,  0.2151,  0.1395,  0.0365],
        [-0.1384, -0.1825, -0.1835,  ..., -0.0261,  0.0021,  0.0578],
        [-0.0442,  0.0391, -0.1073,  ..., -0.1820, -0.1175, -0.0859],
        ...,
        [-0.1151,  0.1309,  0.0249,  ...,  0.1040,  0.0859,  0.0364],
        [ 0.0367, -0.1835,  0.0544,  ..., -0.1835,  0.0157,  0.0938],
        [-0.1362, -0.0141, -0.0775,  ..., -0.2042,  0.1164, -0.1345]],
       device='cuda:0', requires_grad=True)
conv4.bias 
 torch.Size([32]) 
 True 
 tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0') 
 Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0', requires_grad=True)
conv5.weight 
 torch.Size([32, 1]) 
 True 
 tensor([[-0.2289],
        [-0.2627],
        [ 0.3013],
        [ 0.3452],
        [ 0.3021],
        [ 0.3367],
        [ 0.0250],
        [-0.2710],
        [-0.0958],
        [ 0.3058],
        [-0.0558],
        [-0.1311],
        [ 0.1775],
        [-0.1104],
        [ 0.1760],
        [ 0.3050],
        [-0.1245],
        [-0.1871],
        [-0.2468],
        [ 0.2926],
        [ 0.4073],
        [-0.2142],
        [-0.3042],
        [ 0.2087],
        [ 0.2817],
        [-0.4061],
        [ 0.0581],
        [ 0.0446],
        [ 0.1163],
        [-0.1794],
        [ 0.0635],
        [ 0.0596]], device='cuda:0') 
 Parameter containing:
tensor([[-0.2289],
        [-0.2627],
        [ 0.3013],
        [ 0.3452],
        [ 0.3021],
        [ 0.3367],
        [ 0.0250],
        [-0.2710],
        [-0.0958],
        [ 0.3058],
        [-0.0558],
        [-0.1311],
        [ 0.1775],
        [-0.1104],
        [ 0.1760],
        [ 0.3050],
        [-0.1245],
        [-0.1871],
        [-0.2468],
        [ 0.2926],
        [ 0.4073],
        [-0.2142],
        [-0.3042],
        [ 0.2087],
        [ 0.2817],
        [-0.4061],
        [ 0.0581],
        [ 0.0446],
        [ 0.1163],
        [-0.1794],
        [ 0.0635],
        [ 0.0596]], device='cuda:0', requires_grad=True)
conv5.bias 
 torch.Size([1]) 
 True 
 tensor([0.], device='cuda:0') 
 Parameter containing:
tensor([0.], device='cuda:0', requires_grad=True)



input node feature: 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].shape torch.Size([6796, 1]) 
g.ndata[nfet].sum tensor(33.1882, device='cuda:0')



input graph: 
g Graph(num_nodes=6796, num_edges=73186,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)}) 
g.edata[efet].shape torch.Size([73186, 1]) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
g.edata[efet].sum tensor(73186., device='cuda:0', grad_fn=<SumBackward0>) 
g.ndata[nfet].shape torch.Size([6796, 1]) 
g.ndata[nfet] tensor([[0.],
        [0.],
        [0.],
        ...,
        [0.],
        [0.],
        [0.]], device='cuda:0') 
g.ndata[nfet].sum tensor(33.1882, device='cuda:0')
param0_0.shape torch.Size([256])
param.data[:, 0].shape torch.Size([256])



h after the first convolutional layer: 
 tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0',
       grad_fn=<AddBackward0>) 
h.shape torch.Size([6796, 256]) 
h.sum tensor(84.4176, device='cuda:0', grad_fn=<SumBackward0>)



h[:, 0].sum tensor(-2.6568, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[0] tensor(-2.7267, device='cuda:0')



h[100].sum tensor(2.8680, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[100] tensor(2.9435, device='cuda:0')



h[200].sum tensor(0.5871, device='cuda:0', grad_fn=<SumBackward0>)

g.ndata[nfet].sum() * conv1.weight[200] tensor(0.6025, device='cuda:0')



h1 after relu, the first updating, and another relu: 
 tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0',
       grad_fn=<ReluBackward0>) 
h.shape torch.Size([6796, 256]) 
h.sum tensor(3337.6824, device='cuda:0', grad_fn=<SumBackward0>)



h2 after the second convolutional layer: 
 tensor([[0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         0.0000e+00],
        [0.0000e+00, 0.0000e+00, 4.0014e-05,  ..., 0.0000e+00, 0.0000e+00,
         4.1898e-04],
        [0.0000e+00, 0.0000e+00, 2.0878e-04,  ..., 0.0000e+00, 0.0000e+00,
         2.1861e-03],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         0.0000e+00],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         0.0000e+00],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         0.0000e+00]], device='cuda:0', grad_fn=<ReluBackward0>) 
h2.shape torch.Size([6796, 128]) 
h2.sum tensor(13409.8457, device='cuda:0', grad_fn=<SumBackward0>)



h2[0].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param0_2).sum() + bias0 tensor(-26.2148, device='cuda:0', grad_fn=<AddBackward0>)



h2[100].sum tensor(19.3169, device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param50_2).sum() + bias50 tensor(1.5453, device='cuda:0', grad_fn=<AddBackward0>)



h2[200].sum tensor(0., device='cuda:0', grad_fn=<SumBackward0>)

(h1.sum(axis=0) * param100_2).sum() + bias100 tensor(-17.0434, device='cuda:0', grad_fn=<AddBackward0>)



g Graph(num_nodes=6796, num_edges=73186,
      ndata_schemes={'nfet': Scheme(shape=(1,), dtype=torch.float32), 'h1': Scheme(shape=(256,), dtype=torch.float32), 'h2': Scheme(shape=(128,), dtype=torch.float32), 'h3': Scheme(shape=(64,), dtype=torch.float32)}
      edata_schemes={'efet': Scheme(shape=(1,), dtype=torch.float32)})



 output, 
h5 tensor([[0.0533],
        [0.0653],
        [0.0941],
        ...,
        [0.0151],
        [0.0151],
        [0.0119]], device='cuda:0', grad_fn=<AddBackward0>) 
h5.shape torch.Size([6796, 1]) 
h5.sum tensor(1345.4763, device='cuda:0', grad_fn=<SumBackward0>) 
g.edata[efet] tensor([[1.],
        [1.],
        [1.],
        ...,
        [1.],
        [1.],
        [1.]], device='cuda:0', requires_grad=True) 
g.edata[efet].shape torch.Size([73186, 1]) 
g.edata[efet].sum tensor(73186., device='cuda:0', grad_fn=<SumBackward0>)

Passing event 20 from the network before training 
result1: tensor([[0.0533],
        [0.0653],
        [0.0941],
        ...,
        [0.0151],
        [0.0151],
        [0.0119]], device='cuda:0', grad_fn=<AddBackward0>) 
result1.shape: torch.Size([6796, 1]) 
input: [0. 0. 0. ... 0. 0. 0.]
Traceback (most recent call last):
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLpppipiGcnReNewestweight7N2/./TrainingBha.py", line 5, in <module>
    from ModelBha import *
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLpppipiGcnReNewestweight7N2/ModelBha.py", line 148, in <module>
    fig.colorbar(ax2.matshow(sitonsquare(result1.reshape(6796)), aspect=2, extent=[0, 288, 0, 43], origin='lower')\
  File "/hpcfs/bes/mlgpu/hoseinkk/MLTracking/otherparticles/pppipi/DGLpppipiGcnReNewestweight7N2/DataLoadBha.py", line 40, in sitonsquare
    sqevent[i, j + 144] = event[(wiresum[i]) + j + w]
  File "cupy/_core/core.pyx", line 1494, in cupy._core.core._ndarray_base.__len__
TypeError: len() of unsized object

real	0m42.636s
user	0m10.798s
sys	0m13.997s
